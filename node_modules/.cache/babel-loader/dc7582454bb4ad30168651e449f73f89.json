{"ast":null,"code":"import{RoomRightsClearEvent}from'../../communication/messages/incoming/room/access/rights/RoomRightsClearEvent';import{RoomRightsEvent}from'../../communication/messages/incoming/room/access/rights/RoomRightsEvent';import{RoomRightsOwnerEvent}from'../../communication/messages/incoming/room/access/rights/RoomRightsOwnerEvent';import{RoomControllerLevel}from'../enum/RoomControllerLevel';import{BaseHandler}from'./BaseHandler';export class RoomPermissionsHandler extends BaseHandler{constructor(connection,listener){super(connection,listener);connection.addMessageEvent(new RoomRightsEvent(this.onRoomRightsEvent.bind(this)));connection.addMessageEvent(new RoomRightsClearEvent(this.onRoomRightsClearEvent.bind(this)));connection.addMessageEvent(new RoomRightsOwnerEvent(this.onRoomRightsOwnerEvent.bind(this)));}onRoomRightsEvent(event){if(!(event instanceof RoomRightsEvent))return;const session=this.listener.getSession(this.roomId);if(!session)return;session.setControllerLevel(event.getParser().controllerLevel);}onRoomRightsClearEvent(event){if(!(event instanceof RoomRightsClearEvent))return;const session=this.listener.getSession(this.roomId);if(!session)return;session.setControllerLevel(RoomControllerLevel.NONE);}onRoomRightsOwnerEvent(event){if(!(event instanceof RoomRightsOwnerEvent))return;const session=this.listener.getSession(this.roomId);if(!session)return;session.setRoomOwner();}}","map":null,"metadata":{},"sourceType":"module"}