{"ast":null,"code":"import{Vector3d}from'../../../../../room';export class FurniturePlanetSystemVisualizationPlanetObject{constructor(name,index,radius,arcSpeed,arcOffset,height){this._name=void 0;this._index=void 0;this._radius=void 0;this._arcSpeed=void 0;this._arcOffset=void 0;this._height=void 0;this._position=void 0;this._positionVector=void 0;this._children=void 0;this._name=name;this._index=index;this._radius=radius;this._arcSpeed=arcSpeed*Math.PI*2/360;this._arcOffset=arcOffset*Math.PI*2/360;this._height=height;this._position=0;this._positionVector=new Vector3d(0,0,0);this._children=[];}dispose(){while(this._children.length>0){const child=this._children.shift();child.dispose();}}update(offsets,rootPosition,scale){this._position=this._position+this._arcSpeed/FurniturePlanetSystemVisualizationPlanetObject.SYSTEM_TEMPO;offsets[this._index]=this.getPositionVector(rootPosition,scale);for(const child of this._children)child.update(offsets,this._positionVector,scale);}getPositionVector(position,scale){const cos=this._radius*Math.cos(this._position+this._arcOffset);const sine=this._radius*Math.sin(this._position+this._arcOffset);this._positionVector.x=(cos-sine)*(scale/2);this._positionVector.y=(sine+cos)*(scale/2)*0.5-this._height*(scale/2);this._positionVector.z=-Math.trunc(4*(cos+sine)-0.7);if(position)this._positionVector.add(position);return this._positionVector;}addChild(planetObject){if(this._children.indexOf(planetObject)>=0)return;this._children.push(planetObject);}hasChild(name){return!!this.getChild(name);}getChild(name){for(const child of this._children){if(child.name===name)return child;if(child.hasChild(name))return child.getChild(name);}return null;}get name(){return this._name;}}FurniturePlanetSystemVisualizationPlanetObject.SYSTEM_TEMPO=30;","map":null,"metadata":{},"sourceType":"module"}