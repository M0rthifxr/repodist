{"ast":null,"code":"import{AvatarEditorFigureCategory,AvatarScaleType,AvatarSetType}from'@nitrots/nitro-renderer';import{GetAvatarRenderManager}from'../../../api';import{AvatarEditorUtilities}from'./AvatarEditorUtilities';import{CategoryBaseModel}from'./CategoryBaseModel';import{FigureData}from'./FigureData';export class BodyModel extends CategoryBaseModel{constructor(){super(...arguments);this._imageCallBackHandled=false;}init(){super.init();this.addCategory(FigureData.FACE);this._isInitalized=true;}selectColor(category,colorIndex,paletteId){super.selectColor(category,colorIndex,paletteId);this.updateSelectionsFromFigure(FigureData.FACE);}updateSelectionsFromFigure(name){if(!this._categories||!AvatarEditorUtilities.CURRENT_FIGURE)return;const category=this._categories.get(name);if(!category)return;const setId=AvatarEditorUtilities.CURRENT_FIGURE.getPartSetId(name);let colorIds=AvatarEditorUtilities.CURRENT_FIGURE.getColorIds(name);if(!colorIds)colorIds=[];category.selectPartId(setId);category.selectColorIds(colorIds);for(const part of category.parts){const resetFigure=figure=>{const figureString=AvatarEditorUtilities.CURRENT_FIGURE.getFigureStringWithFace(part.id);const avatarImage=GetAvatarRenderManager().createAvatarImage(figureString,AvatarScaleType.LARGE,null,{resetFigure,dispose:null,disposed:false});const sprite=avatarImage.getImageAsSprite(AvatarSetType.HEAD);if(sprite){sprite.y=10;part.thumbContainer=sprite;setTimeout(()=>avatarImage.dispose(),0);}};resetFigure(null);}}get canSetGender(){return true;}get name(){return AvatarEditorFigureCategory.GENERIC;}}","map":null,"metadata":{},"sourceType":"module"}