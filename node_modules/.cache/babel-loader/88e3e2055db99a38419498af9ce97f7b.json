{"ast":null,"code":"import{ActionDefinition}from'./ActionDefinition';export class AvatarActionManager{constructor(k,data){this._assets=void 0;this._actions=void 0;this._defaultAction=void 0;this._assets=k;this._actions=new Map();this._defaultAction=null;this.updateActions(data);}updateActions(data){if(!data)return;for(const action of data.actions){if(!action||!action.state)continue;const definition=new ActionDefinition(action);this._actions.set(definition.state,definition);}if(data.actionOffsets)this.parseActionOffsets(data.actionOffsets);}parseActionOffsets(offsets){if(!offsets||!offsets.length)return;for(const offset of offsets){const action=this._actions.get(offset.action);if(!action)continue;for(const canvasOffset of offset.offsets){const size=canvasOffset.size||'';const direction=canvasOffset.direction;if(size===''||direction===undefined)continue;const x=canvasOffset.x||0;const y=canvasOffset.y||0;const z=canvasOffset.z||0;action.setOffsets(size,direction,[x,y,z]);}}}getActionDefinition(id){if(!id)return null;for(const action of this._actions.values()){if(!action||action.id!==id)continue;return action;}return null;}getActionDefinitionWithState(state){const existing=this._actions.get(state);if(!existing)return null;return existing;}getDefaultAction(){if(this._defaultAction)return this._defaultAction;for(const action of this._actions.values()){if(!action||!action.isDefault)continue;this._defaultAction=action;return action;}return null;}getCanvasOffsets(k,_arg_2,_arg_3){let canvasOffsets=[];for(const activeAction of k){if(!activeAction)continue;const action=this._actions.get(activeAction.actionType);const offsets=action&&action.getOffsets(_arg_2,_arg_3);if(offsets)canvasOffsets=offsets;}return canvasOffsets;}sortActions(actions){if(!actions)return null;actions=this.filterActions(actions);const validatedActions=[];for(const action of actions){if(!action)continue;const definition=this._actions.get(action.actionType);if(!definition)continue;action.definition=definition;validatedActions.push(action);}validatedActions.sort(this.sortByPrecedence);return validatedActions;}filterActions(actions){let preventions=[];const activeActions=[];for(const action of actions){if(!action)continue;const localAction=this._actions.get(action.actionType);if(localAction)preventions=preventions.concat(localAction.getPrevents(action.actionParameter));}for(const action of actions){if(!action)continue;let actionType=action.actionType;if(action.actionType==='fx')actionType=actionType+('.'+action.actionParameter);if(preventions.indexOf(actionType)>=0)continue;activeActions.push(action);}return activeActions;}sortByPrecedence(actionOne,actionTwo){if(!actionOne||!actionTwo)return 0;const precedenceOne=actionOne.definition.precedence;const precedenceTwo=actionTwo.definition.precedence;if(precedenceOne<precedenceTwo)return 1;if(precedenceOne>precedenceTwo)return-1;return 0;}}","map":null,"metadata":{},"sourceType":"module"}