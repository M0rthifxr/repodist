{"ast":null,"code":"import{NitroManager}from'../core/common/NitroManager';import{RoomContentLoader}from'../nitro/room/RoomContentLoader';import{RoomContentLoadedEvent}from'./events/RoomContentLoadedEvent';import{RoomInstance}from'./RoomInstance';import{RoomObjectManager}from'./RoomObjectManager';export class RoomManager extends NitroManager{constructor(listener,visualizationFactory,logicFactory){super();this._state=void 0;this._rooms=void 0;this._contentLoader=void 0;this._updateCategories=void 0;this._listener=void 0;this._visualizationFactory=void 0;this._logicFactory=void 0;this._initialLoadList=void 0;this._pendingContentTypes=void 0;this._skipContentProcessing=void 0;this._disposed=void 0;this._state=RoomManager.ROOM_MANAGER_LOADED;this._rooms=new Map();this._contentLoader=null;this._updateCategories=[];this._listener=listener;this._visualizationFactory=visualizationFactory;this._logicFactory=logicFactory;this._initialLoadList=[];this._pendingContentTypes=[];this._skipContentProcessing=false;this._disposed=false;this.onRoomContentLoadedEvent=this.onRoomContentLoadedEvent.bind(this);this.events.addEventListener(RoomContentLoadedEvent.RCLE_SUCCESS,this.onRoomContentLoadedEvent);this.events.addEventListener(RoomContentLoadedEvent.RCLE_FAILURE,this.onRoomContentLoadedEvent);this.events.addEventListener(RoomContentLoadedEvent.RCLE_CANCEL,this.onRoomContentLoadedEvent);}onInit(){if(this._state>=RoomManager.ROOM_MANAGER_INITIALIZING||!this._contentLoader)return;const mandatoryLibraries=RoomContentLoader.MANDATORY_LIBRARIES;for(const library of mandatoryLibraries){if(!library)continue;if(this._initialLoadList.indexOf(library)===-1){this._contentLoader.downloadAsset(library,this.events);this._initialLoadList.push(library);}}this._state=RoomManager.ROOM_MANAGER_INITIALIZING;}getRoomInstance(roomId){const existing=this._rooms.get(roomId);if(!existing)return null;return existing;}createRoomInstance(roomId){if(this._rooms.get(roomId))return null;const instance=new RoomInstance(roomId,this);this._rooms.set(instance.id,instance);if(this._updateCategories.length){for(const category of this._updateCategories){instance.addUpdateCategory(category);}}return instance;}removeRoomInstance(roomId){const existing=this._rooms.get(roomId);if(!existing)return false;this._rooms.delete(roomId);existing.dispose();return true;}createRoomObjectAndInitalize(roomId,objectId,type,category){const instance=this.getRoomInstance(roomId);if(!instance)return null;let visualization=type;let logic=type;let assetName=type;let asset=null;let isLoading=false;if(this._contentLoader.isLoaderType(type)){asset=this._contentLoader.getCollection(type);if(!asset){isLoading=true;this._contentLoader.downloadAsset(type,this.events);assetName=this._contentLoader.getPlaceholderName(type);asset=this._contentLoader.getCollection(assetName);if(!asset)return null;}visualization=asset.data.visualizationType;logic=asset.data.logicType;}const object=instance.createRoomObject(objectId,1,type,category);if(!object)return null;if(this._visualizationFactory){const visualizationInstance=this._visualizationFactory.getVisualization(visualization);if(!visualizationInstance){instance.removeRoomObject(objectId,category);return null;}visualizationInstance.asset=asset;const visualizationData=this._visualizationFactory.getVisualizationData(assetName,visualization,asset&&asset.data||null);if(!visualizationData||!visualizationInstance.initialize(visualizationData)){instance.removeRoomObject(objectId,category);return null;}object.setVisualization(visualizationInstance);}if(this._logicFactory){const logicInstance=this._logicFactory.getLogic(logic);object.setLogic(logicInstance);if(logicInstance){logicInstance.initialize(asset&&asset.data||null);}}if(!isLoading)object.isReady=true;this._contentLoader.setRoomObjectRoomId(object,roomId);return object;}reinitializeRoomObjectsByType(type){if(!type||!this._contentLoader||!this._visualizationFactory||!this._logicFactory)return;const asset=this._contentLoader.getCollection(type);if(!asset)return;const visualization=asset.data.visualizationType;const logic=asset.data.logicType;const visualizationData=this._visualizationFactory.getVisualizationData(type,visualization,asset.data);for(const room of this._rooms.values()){if(!room)continue;for(const[category,manager]of room.managers.entries()){if(!manager)continue;for(const object of manager.objects.getValues()){if(!object||object.type!==type)continue;const visualizationInstance=this._visualizationFactory.getVisualization(visualization);if(visualizationInstance){visualizationInstance.asset=asset;if(!visualizationData||!visualizationInstance.initialize(visualizationData)){manager.removeObject(object.id);}else{object.setVisualization(visualizationInstance);const logicInstance=this._logicFactory.getLogic(logic);object.setLogic(logicInstance);if(logicInstance){logicInstance.initialize(asset.data);}object.isReady=true;if(this._listener)this._listener.objectInitialized(room.id,object.id,category);}}else{manager.removeObject(object.id);}}}}}addUpdateCategory(category){const index=this._updateCategories.indexOf(category);if(index>=0)return;this._updateCategories.push(category);if(!this._rooms.size)return;for(const room of this._rooms.values()){if(!room)continue;room.addUpdateCategory(category);}}removeUpdateCategory(category){const index=this._updateCategories.indexOf(category);if(index===-1)return;this._updateCategories.splice(index,1);if(!this._rooms.size)return;for(const room of this._rooms.values()){if(!room)continue;room.removeUpdateCategory(category);}}setContentLoader(loader){if(this._contentLoader)this._contentLoader.dispose();this._contentLoader=loader;}processPendingContentTypes(time){if(this._skipContentProcessing){this._skipContentProcessing=false;return;}while(this._pendingContentTypes.length){const type=this._pendingContentTypes.shift();const collection=this._contentLoader.getCollection(type);if(!collection){if(this._listener){this._listener.initalizeTemporaryObjectsByType(type,false);}this.logger.log(`Invalid Collection: ${type}`);continue;}this.reinitializeRoomObjectsByType(type);if(this._listener)this._listener.initalizeTemporaryObjectsByType(type,true);if(this._initialLoadList.length>0)this.removeFromInitialLoad(type);}}removeFromInitialLoad(type){if(!type||this._state===RoomManager.ROOM_MANAGER_ERROR)return;if(!this._contentLoader)this._state=RoomManager.ROOM_MANAGER_ERROR;if(this._contentLoader.getCollection(type)){const i=this._initialLoadList.indexOf(type);if(i>=0)this._initialLoadList.splice(i,1);if(!this._initialLoadList.length){this._state=RoomManager.ROOM_MANAGER_INITIALIZED;if(this._listener){this._listener.onRoomEngineInitalized(true);}}}else{this._state=RoomManager.ROOM_MANAGER_ERROR;if(this._listener)this._listener.onRoomEngineInitalized(false);}}onRoomContentLoadedEvent(event){if(!this._contentLoader)return;const contentType=event.contentType;if(this._pendingContentTypes.indexOf(contentType)>=0)return;this._pendingContentTypes.push(contentType);}update(time){let update=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this.processPendingContentTypes(time);if(!this._rooms.size)return;for(const room of this._rooms.values())room&&room.update(time,update);}createRoomObjectManager(category){return new RoomObjectManager();}get rooms(){return this._rooms;}get disposed(){return this._disposed;}}RoomManager.ROOM_MANAGER_ERROR=-1;RoomManager.ROOM_MANAGER_LOADING=0;RoomManager.ROOM_MANAGER_LOADED=1;RoomManager.ROOM_MANAGER_INITIALIZING=2;RoomManager.ROOM_MANAGER_INITIALIZED=3;RoomManager.CONTENT_PROCESSING_TIME_LIMIT_MILLISECONDS=40;","map":null,"metadata":{},"sourceType":"module"}