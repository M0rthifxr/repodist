{"ast":null,"code":"import{useMemo}from'react';import{Base}from'./Base';import{GridContextProvider}from'./GridContext';import{jsx as _jsx}from\"react/jsx-runtime\";export const Grid=props=>{const{inline=false,gap=2,maxContent=false,columnCount=0,center=false,alignSelf=null,alignItems=null,justifyContent=null,fullHeight=true,classNames=[],style={},...rest}=props;const getClassNames=useMemo(()=>{const newClassNames=[];if(inline)newClassNames.push('inline-grid');else newClassNames.push('grid');if(gap)newClassNames.push('gap-'+gap);else if(gap===0)newClassNames.push('gap-0');if(maxContent)newClassNames.push('flex-basis-max-content');if(alignSelf)newClassNames.push('align-self-'+alignSelf);if(alignItems)newClassNames.push('align-items-'+alignItems);if(justifyContent)newClassNames.push('justify-content-'+justifyContent);if(!alignItems&&!justifyContent&&center)newClassNames.push('align-items-center','justify-content-center');if(classNames.length)newClassNames.push(...classNames);return newClassNames;},[inline,gap,maxContent,alignSelf,alignItems,justifyContent,center,classNames]);const getStyle=useMemo(()=>{let newStyle={};if(columnCount)newStyle['--bs-columns']=columnCount.toString();if(Object.keys(style).length)newStyle={...newStyle,...style};return newStyle;},[columnCount,style]);return/*#__PURE__*/_jsx(GridContextProvider,{value:{isCssGrid:true},children:/*#__PURE__*/_jsx(Base,{fullHeight:fullHeight,classNames:getClassNames,style:getStyle,...rest})});};","map":null,"metadata":{},"sourceType":"module"}