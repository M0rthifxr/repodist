{"ast":null,"code":"import{Rectangle}from'@pixi/math';import{AdvancedMap}from'../../../../../core/utils/AdvancedMap';import{AlphaTolerance}from'../../../../../room/object/enum/AlphaTolerance';import{RoomObjectSpriteType}from'../../../../../room/object/enum/RoomObjectSpriteType';import{RoomObjectSpriteVisualization}from'../../../../../room/object/visualization/RoomObjectSpriteVisualization';import{Vector3d}from'../../../../../room/utils/Vector3d';import{RoomObjectVariable}from'../../RoomObjectVariable';import{RoomPlaneBitmapMaskData}from'../../RoomPlaneBitmapMaskData';import{RoomPlaneBitmapMaskParser}from'../../RoomPlaneBitmapMaskParser';import{RoomPlaneData}from'../../RoomPlaneData';import{RoomPlaneParser}from'../../RoomPlaneParser';import{RoomPlane}from'./RoomPlane';import{RoomVisualizationData}from'./RoomVisualizationData';export class RoomVisualization extends RoomObjectSpriteVisualization{constructor(){super();this._data=void 0;this._roomPlaneParser=void 0;this._roomPlaneBitmapMaskParser=void 0;this._geometryUpdateId=void 0;this._boundingRectangle=void 0;this._directionX=void 0;this._directionY=void 0;this._directionZ=void 0;this._floorThickness=void 0;this._wallThickness=void 0;this._holeUpdateTime=void 0;this._planes=void 0;this._visiblePlanes=void 0;this._visiblePlaneSpriteNumbers=void 0;this._roomScale=void 0;this._lastUpdateTime=void 0;this._updateIntervalTime=void 0;this._wallType=void 0;this._floorType=void 0;this._landscapeType=void 0;this._colorBackgroundOnly=void 0;this._color=void 0;this._redColor=void 0;this._greenColor=void 0;this._blueColor=void 0;this._typeVisibility=void 0;this._assetUpdateCounter=void 0;this._maskData=void 0;this._isPlaneSet=void 0;this._data=null;this._roomPlaneParser=new RoomPlaneParser();this._roomPlaneBitmapMaskParser=new RoomPlaneBitmapMaskParser();this._geometryUpdateId=-1;this._directionX=0;this._directionY=0;this._directionZ=0;this._floorThickness=1;this._wallThickness=1;this._holeUpdateTime=NaN;this._planes=[];this._visiblePlanes=[];this._visiblePlaneSpriteNumbers=[];this._roomScale=0;this._lastUpdateTime=-1000;this._updateIntervalTime=250;this._wallType=null;this._floorType=null;this._landscapeType=null;this._colorBackgroundOnly=true;this._color=0xFFFFFF;this._redColor=0xFF;this._greenColor=0xFF;this._blueColor=0xFF;this._typeVisibility=[];this._assetUpdateCounter=0;this._maskData=null;this._isPlaneSet=false;this._typeVisibility[RoomPlane.TYPE_UNDEFINED]=false;this._typeVisibility[RoomPlane.TYPE_FLOOR]=true;this._typeVisibility[RoomPlane.TYPE_WALL]=true;this._typeVisibility[RoomPlane.TYPE_LANDSCAPE]=true;}static getTextureCache(key){const existing=RoomVisualization.RENDER_TEXTURE_CACHE.get(RoomVisualization.LAST_VISUALIZATION);if(!existing)return null;return existing.getValue(key);}static addTextureCache(key,value){if(!RoomVisualization.LAST_VISUALIZATION)return;let existing=RoomVisualization.RENDER_TEXTURE_CACHE.get(RoomVisualization.LAST_VISUALIZATION);if(!existing){existing=new AdvancedMap();RoomVisualization.RENDER_TEXTURE_CACHE.set(RoomVisualization.LAST_VISUALIZATION,existing);}existing.add(key,value);}initialize(data){if(!(data instanceof RoomVisualizationData))return false;this._data=data;super.initialize(data);this._data.setGraphicAssetCollection(this.asset);return true;}dispose(){super.dispose();this.clearPlanes();this._planes=null;this._visiblePlanes=null;this._visiblePlaneSpriteNumbers=null;if(this._roomPlaneParser){this._roomPlaneParser.dispose();this._roomPlaneParser=null;}if(this._roomPlaneBitmapMaskParser){this._roomPlaneBitmapMaskParser.dispose();this._roomPlaneBitmapMaskParser=null;}if(this._data){this._data.clearCache();this._data=null;}const existingTextureCache=RoomVisualization.RENDER_TEXTURE_CACHE.get(this);if(existingTextureCache){for(const texture of existingTextureCache.getValues()){texture.destroy(true);}existingTextureCache.dispose();RoomVisualization.RENDER_TEXTURE_CACHE.delete(this);}}reset(){super.reset();this._floorType=null;this._wallType=null;this._landscapeType=null;this._maskData=null;this._geometryUpdateId=-1;this._roomScale=0;}update(geometry,time,update,skipUpdate){if(!this.object||!geometry)return;RoomVisualization.LAST_VISUALIZATION=this;let removeCount=0;const existing=RoomVisualization.RENDER_TEXTURE_CACHE.get(RoomVisualization.LAST_VISUALIZATION);if(existing)removeCount=existing.length;const geometryUpdate=this.updateGeometry(geometry);const objectModel=this.object.model;let needsUpdate=false;if(this.updateThickness(objectModel))needsUpdate=true;if(this.updateHole(objectModel))needsUpdate=true;if(this.initializeRoomPlanes()){if(existing&&removeCount){setTimeout(()=>{while(removeCount){const texture=existing.getWithIndex(0);if(texture){texture.destroy(true);existing.remove(existing.getKey(0));}removeCount--;}},0);}}needsUpdate=this.updateMasks(objectModel);if(time<this._lastUpdateTime+this._updateIntervalTime&&!geometryUpdate&&!needsUpdate)return;if(this.updatePlaneTexturesAndVisibilities(objectModel))needsUpdate=true;if(this.updatePlanes(geometry,geometryUpdate,time))needsUpdate=true;if(needsUpdate){let index=0;while(index<this._visiblePlanes.length){const spriteIndex=this._visiblePlaneSpriteNumbers[index];const sprite=this.getSprite(spriteIndex);const plane=this._visiblePlanes[index];if(sprite&&plane&&plane.type!==RoomPlane.TYPE_LANDSCAPE){if(this._colorBackgroundOnly){let _local_14=plane.color;const _local_15=(_local_14&0xFF)*this._redColor/0xFF;const _local_16=(_local_14>>8&0xFF)*this._greenColor/0xFF;const _local_17=(_local_14>>16&0xFF)*this._blueColor/0xFF;const _local_18=_local_14>>24;_local_14=(_local_18<<24)+(_local_17<<16)+(_local_16<<8)+_local_15;sprite.color=_local_14;}else{sprite.color=plane.color;}}index++;}this.updateSpriteCounter++;}this.updateModelCounter=objectModel.updateCounter;this._lastUpdateTime=time;}updateGeometry(k){if(!k)return false;if(this._geometryUpdateId===k.updateId)return false;this._geometryUpdateId=k.updateId;this._boundingRectangle=null;const direction=k.direction;if(direction&&(direction.x!==this._directionX||direction.y!==this._directionY||direction.z!==this._directionZ||k.scale!==this._roomScale)){this._directionX=direction.x;this._directionY=direction.y;this._directionZ=direction.z;this._roomScale=k.scale;return true;}return false;}updateThickness(k){if(this.updateModelCounter===k.updateCounter)return false;const floorThickness=k.getValue(RoomObjectVariable.ROOM_FLOOR_THICKNESS);const wallThickness=k.getValue(RoomObjectVariable.ROOM_WALL_THICKNESS);if(!isNaN(floorThickness)&&!isNaN(wallThickness)&&(floorThickness!==this._floorThickness||wallThickness!==this._wallThickness)){this._floorThickness=floorThickness;this._wallThickness=wallThickness;this.clearPlanes();return true;}return false;}updateHole(k){if(this.updateModelCounter===k.updateCounter)return false;const holeUpdate=k.getValue(RoomObjectVariable.ROOM_FLOOR_HOLE_UPDATE_TIME);if(!isNaN(holeUpdate)&&holeUpdate!==this._holeUpdateTime){this._holeUpdateTime=holeUpdate;this.clearPlanes();return true;}return false;}updateMasks(k){if(this.updateModelCounter===k.updateCounter)return false;let didUpdate=false;const planeMask=k.getValue(RoomObjectVariable.ROOM_PLANE_MASK_XML);if(planeMask!==this._maskData){this.updatePlaneMasks(planeMask);this._maskData=planeMask;didUpdate=true;}const backgroundColor=k.getValue(RoomObjectVariable.ROOM_BACKGROUND_COLOR);if(backgroundColor!==this._color){this._color=backgroundColor;this._redColor=this._color&0xFF;this._greenColor=this._color>>8&0xFF;this._blueColor=this._color>>16&0xFF;didUpdate=true;}const backgroundOnly=k.getValue(RoomObjectVariable.ROOM_COLORIZE_BG_ONLY)||false;if(backgroundOnly!==this._colorBackgroundOnly){this._colorBackgroundOnly=backgroundOnly;didUpdate=true;}return didUpdate;}updatePlaneTexturesAndVisibilities(model){if(this.updateModelCounter===model.updateCounter)return false;const floorType=model.getValue(RoomObjectVariable.ROOM_FLOOR_TYPE);const wallType=model.getValue(RoomObjectVariable.ROOM_WALL_TYPE);const landscapeType=model.getValue(RoomObjectVariable.ROOM_LANDSCAPE_TYPE);this.updatePlaneTypes(floorType,wallType,landscapeType);const floorVisibility=model.getValue(RoomObjectVariable.ROOM_FLOOR_VISIBILITY)===1;const wallVisibility=model.getValue(RoomObjectVariable.ROOM_WALL_VISIBILITY)===1;const landscapeVisibility=model.getValue(RoomObjectVariable.ROOM_LANDSCAPE_VISIBILITY)===1;this.updatePlaneVisibility(floorVisibility,wallVisibility,landscapeVisibility);return true;}clearPlanes(){if(this._planes){while(this._planes.length){const plane=this._planes[0];if(plane)plane.dispose();this._planes.pop();}this._planes=[];this._planes=[];}this._isPlaneSet=false;this._assetUpdateCounter=this._assetUpdateCounter+1;this.reset();}initializeRoomPlanes(){if(!this.object||this._isPlaneSet)return false;if(!isNaN(this._floorThickness))this._roomPlaneParser.floorThicknessMultiplier=this._floorThickness;if(!isNaN(this._wallThickness))this._roomPlaneParser.wallThicknessMultiplier=this._wallThickness;const mapData=this.object.model.getValue(RoomObjectVariable.ROOM_MAP_DATA);if(!this._roomPlaneParser.initializeFromMapData(mapData))return;const _local_3=this.getLandscapeWidth();const _local_4=this.getLandscapeHeight();let _local_5=0;let randomSeed=this.object.model.getValue(RoomObjectVariable.ROOM_RANDOM_SEED);let index=0;while(index<this._roomPlaneParser.planeCount){const location=this._roomPlaneParser.getPlaneLocation(index);const leftSide=this._roomPlaneParser.getPlaneLeftSide(index);const rightSide=this._roomPlaneParser.getPlaneRightSide(index);const secondaryNormals=this._roomPlaneParser.getPlaneSecondaryNormals(index);const planeType=this._roomPlaneParser.getPlaneType(index);let plane=null;if(location&&leftSide&&rightSide){const _local_14=Vector3d.crossProduct(leftSide,rightSide);randomSeed=randomSeed*7613+517;plane=null;if(planeType===RoomPlaneData.PLANE_FLOOR){const _local_15=location.x+leftSide.x+0.5;const _local_16=location.y+rightSide.y+0.5;const textureOffsetX=Math.trunc(_local_15)-_local_15;const textureOffsetY=Math.trunc(_local_16)-_local_16;plane=new RoomPlane(this.object.getLocation(),location,leftSide,rightSide,RoomPlane.TYPE_FLOOR,true,secondaryNormals,randomSeed,-textureOffsetX,-textureOffsetY);if(_local_14.z!==0){plane.color=RoomVisualization.FLOOR_COLOR;}else{plane.color=_local_14.x!==0?RoomVisualization.FLOOR_COLOR_RIGHT:RoomVisualization.FLOOR_COLOR_LEFT;}if(this._data)plane.rasterizer=this._data.floorRasterizer;}else if(planeType===RoomPlaneData.PLANE_WALL){plane=new RoomPlane(this.object.getLocation(),location,leftSide,rightSide,RoomPlane.TYPE_WALL,true,secondaryNormals,randomSeed);if(leftSide.length<1||rightSide.length<1){plane.hasTexture=false;}if(_local_14.x===0&&_local_14.y===0){plane.color=RoomVisualization.WALL_COLOR_BORDER;}else{if(_local_14.y>0){plane.color=RoomVisualization.WALL_COLOR_TOP;}else{if(_local_14.y===0){plane.color=RoomVisualization.WALL_COLOR_SIDE;}else{plane.color=RoomVisualization.WALL_COLOR_BOTTOM;}}}if(this._data)plane.rasterizer=this._data.wallRasterizer;}else if(planeType===RoomPlaneData.PLANE_LANDSCAPE){plane=new RoomPlane(this.object.getLocation(),location,leftSide,rightSide,RoomPlane.TYPE_LANDSCAPE,true,secondaryNormals,randomSeed,_local_5,0,_local_3,_local_4);if(_local_14.y>0){plane.color=RoomVisualization.LANDSCAPE_COLOR_TOP;}else{if(_local_14.y==0){plane.color=RoomVisualization.LANDSCAPE_COLOR_SIDE;}else{plane.color=RoomVisualization.LANDSCAPE_COLOR_BOTTOM;}}if(this._data)plane.rasterizer=this._data.landscapeRasterizer;_local_5=_local_5+leftSide.length;}else if(planeType==RoomPlaneData.PLANE_BILLBOARD){plane=new RoomPlane(this.object.getLocation(),location,leftSide,rightSide,RoomPlane.TYPE_WALL,true,secondaryNormals,randomSeed);if(leftSide.length<1||rightSide.length<1){plane.hasTexture=false;}if(_local_14.x==0&&_local_14.y==0){plane.color=RoomVisualization.WALL_COLOR_BORDER;}else{if(_local_14.y>0){plane.color=RoomVisualization.WALL_COLOR_TOP;}else{if(_local_14.y==0){plane.color=RoomVisualization.WALL_COLOR_SIDE;}else{plane.color=RoomVisualization.WALL_COLOR_BOTTOM;}}}// if (this._Str_594 != null)\n// {\n//     _local_13.rasterizer = this._Str_594._Str_23913;\n// }\n}if(plane){plane.maskManager=this._data.maskManager;let _local_19=0;while(_local_19<this._roomPlaneParser.getPlaneMaskCount(index)){const _local_20=this._roomPlaneParser.getPlaneMaskLeftSideLoc(index,_local_19);const _local_21=this._roomPlaneParser.getPlaneMaskRightSideLoc(index,_local_19);const _local_22=this._roomPlaneParser.getPlaneMaskLeftSideLength(index,_local_19);const _local_23=this._roomPlaneParser.getPlaneMaskRightSideLength(index,_local_19);plane.addRectangleMask(_local_20,_local_21,_local_22,_local_23);_local_19++;}this._planes.push(plane);}}else{return;}index++;}this._isPlaneSet=true;this.defineSprites();return true;}defineSprites(){this.createSprites(this._planes.length);let planeIndex=0;while(planeIndex<this._planes.length){const plane=this._planes[planeIndex];const sprite=this.getSprite(planeIndex);if(plane&&sprite&&plane.leftSide&&plane.rightSide){if(plane.type===RoomPlane.TYPE_WALL&&(plane.leftSide.length<1||plane.rightSide.length<1)){sprite.alphaTolerance=AlphaTolerance.MATCH_NOTHING;}else{sprite.alphaTolerance=AlphaTolerance.MATCH_OPAQUE_PIXELS;}if(plane.type===RoomPlane.TYPE_WALL){sprite.tag='plane.wall@'+(planeIndex+1);}else if(plane.type===RoomPlane.TYPE_FLOOR){sprite.tag='plane.floor@'+(planeIndex+1);}else{sprite.tag='plane@'+(planeIndex+1);}sprite.spriteType=RoomObjectSpriteType.ROOM_PLANE;}planeIndex++;}}getLandscapeWidth(){let length=0;let index=0;while(index<this._roomPlaneParser.planeCount){const type=this._roomPlaneParser.getPlaneType(index);if(type===RoomPlaneData.PLANE_LANDSCAPE){const vector=this._roomPlaneParser.getPlaneLeftSide(index);length+=vector.length;}index++;}return length;}getLandscapeHeight(){let length=0;let index=0;while(index<this._roomPlaneParser.planeCount){const type=this._roomPlaneParser.getPlaneType(index);if(type===RoomPlaneData.PLANE_LANDSCAPE){const vector=this._roomPlaneParser.getPlaneRightSide(index);if(vector.length>length)length=vector.length;}index++;}if(length>5)length=5;return length;}updatePlaneTypes(floorType,wallType,landscapeType){if(floorType!==this._floorType)this._floorType=floorType;else floorType=null;if(wallType!==this._wallType)this._wallType=wallType;else wallType=null;if(landscapeType!==this._landscapeType)this._landscapeType=landscapeType;else landscapeType=null;if(!floorType&&!wallType&&!landscapeType)return false;let index=0;while(index<this._planes.length){const plane=this._planes[index];if(plane){if(plane.type===RoomPlane.TYPE_FLOOR&&floorType){plane.id=floorType;}else if(plane.type===RoomPlane.TYPE_WALL&&wallType){plane.id=wallType;}else if(plane.type===RoomPlane.TYPE_LANDSCAPE&&landscapeType){plane.id=landscapeType;}}index++;}return true;}updatePlaneVisibility(k,_arg_2,_arg_3){if(k===this._typeVisibility[RoomPlane.TYPE_FLOOR]&&_arg_2===this._typeVisibility[RoomPlane.TYPE_WALL]&&_arg_3===this._typeVisibility[RoomPlane.TYPE_LANDSCAPE])return;this._typeVisibility[RoomPlane.TYPE_FLOOR]=k;this._typeVisibility[RoomPlane.TYPE_WALL]=_arg_2;this._typeVisibility[RoomPlane.TYPE_LANDSCAPE]=_arg_3;this._visiblePlanes=[];this._visiblePlaneSpriteNumbers=[];}updatePlanes(k,_arg_2,_arg_3){if(!k||!this.object)return;this._assetUpdateCounter++;if(_arg_2){this._visiblePlanes=[];this._visiblePlaneSpriteNumbers=[];}const _local_8=this._visiblePlanes.length>0;let _local_6=this._visiblePlanes;if(!this._visiblePlanes.length)_local_6=this._planes;let depth=0;let updated=false;let index=0;while(index<_local_6.length){let _local_10=index;if(_local_8)_local_10=this._visiblePlaneSpriteNumbers[index];const _local_11=this.getSprite(_local_10);if(_local_11){const _local_12=_local_6[index];if(_local_12){_local_11.id=_local_12.uniqueId;if(_local_12.update(k,_arg_3)){if(_local_12.visible){depth=_local_12.relativeDepth+this.floorRelativeDepth+_local_10/1000;if(_local_12.type!==RoomPlane.TYPE_FLOOR){depth=_local_12.relativeDepth+this.wallRelativeDepth+_local_10/1000;if(_local_12.leftSide.length<1||_local_12.rightSide.length<1){depth=depth+RoomVisualization.ROOM_DEPTH_OFFSET*0.5;}}const _local_14='plane '+_local_10+' '+k.scale;this.updateSprite(_local_11,_local_12,_local_14,depth);}updated=true;}if(_local_11.visible!=(_local_12.visible&&this._typeVisibility[_local_12.type])){_local_11.visible=!_local_11.visible;updated=true;}if(_local_11.visible){if(!_local_8){this._visiblePlanes.push(_local_12);this._visiblePlaneSpriteNumbers.push(index);}}}else{_local_11.id=0;if(_local_11.visible){_local_11.visible=false;updated=true;}}}index++;}return updated;}updatePlaneMasks(k){if(!k)return;this._roomPlaneBitmapMaskParser.initialize(k);const _local_4=[];const _local_5=[];let _local_6=false;let index=0;while(index<this._planes.length){const plane=this._planes[index];if(plane){plane.resetBitmapMasks();if(plane.type===RoomPlane.TYPE_LANDSCAPE)_local_4.push(index);}index++;}for(const mask of this._roomPlaneBitmapMaskParser.masks.values()){const maskType=this._roomPlaneBitmapMaskParser.getMaskType(mask);const maskLocation=this._roomPlaneBitmapMaskParser.getMaskLocation(mask);const maskCategory=this._roomPlaneBitmapMaskParser.getMaskCategory(mask);if(maskLocation){let i=0;while(i<this._planes.length){const plane=this._planes[i];if(plane.type===RoomPlane.TYPE_WALL||plane.type===RoomPlane.TYPE_LANDSCAPE){if(plane&&plane.location&&plane.normal){const _local_14=Vector3d.dif(maskLocation,plane.location);const _local_15=Math.abs(Vector3d.scalarProjection(_local_14,plane.normal));if(_local_15<0.01){if(plane.leftSide&&plane.rightSide){const _local_16=Vector3d.scalarProjection(_local_14,plane.leftSide);const _local_17=Vector3d.scalarProjection(_local_14,plane.rightSide);if(plane.type===RoomPlane.TYPE_WALL||plane.type===RoomPlane.TYPE_LANDSCAPE&&maskCategory===RoomPlaneBitmapMaskData.HOLE){plane.addBitmapMask(maskType,_local_16,_local_17);}else{if(plane.type===RoomPlane.TYPE_LANDSCAPE){if(!plane.canBeVisible)_local_6=true;plane.canBeVisible=true;_local_5.push(i);}}}}}}i++;}}}index=0;while(index<_local_4.length){const planeIndex=_local_4[index];if(_local_5.indexOf(planeIndex)<0){const plane=this._planes[planeIndex];plane.canBeVisible=false;_local_6=true;}index++;}if(_local_6){this._visiblePlanes=[];this._visiblePlaneSpriteNumbers=[];}}updateSprite(k,_arg_2,_arg_3,_arg_4){const offset=_arg_2.offset;k.offsetX=-offset.x;k.offsetY=-offset.y;k.relativeDepth=_arg_4;k.color=_arg_2.color;k.texture=this.getPlaneBitmap(_arg_2,_arg_3);k.name=_arg_3+'_'+this._assetUpdateCounter;}getPlaneBitmap(k,_arg_2){return k.bitmapData;}getBoundingRectangle(){if(!this._boundingRectangle)this._boundingRectangle=super.getBoundingRectangle();return new Rectangle(this._boundingRectangle.x,this._boundingRectangle.y,this._boundingRectangle.width,this._boundingRectangle.height);}get planes(){const planes=[];for(const plane of this._visiblePlanes)planes.push(plane);return planes;}get floorRelativeDepth(){return RoomVisualization.ROOM_DEPTH_OFFSET+0.1;}get wallRelativeDepth(){return RoomVisualization.ROOM_DEPTH_OFFSET+0.5;}}RoomVisualization.LAST_VISUALIZATION=null;RoomVisualization.RENDER_TEXTURE_CACHE=new Map();RoomVisualization.FLOOR_COLOR=0xFFFFFF;RoomVisualization.FLOOR_COLOR_LEFT=0xDDDDDD;RoomVisualization.FLOOR_COLOR_RIGHT=0xBBBBBB;RoomVisualization.WALL_COLOR_TOP=0xFFFFFF;RoomVisualization.WALL_COLOR_SIDE=0xCCCCCC;RoomVisualization.WALL_COLOR_BOTTOM=0x999999;RoomVisualization.WALL_COLOR_BORDER=0x999999;RoomVisualization.LANDSCAPE_COLOR_TOP=0xFFFFFF;RoomVisualization.LANDSCAPE_COLOR_SIDE=0xCCCCCC;RoomVisualization.LANDSCAPE_COLOR_BOTTOM=0x999999;RoomVisualization.ROOM_DEPTH_OFFSET=1000;","map":null,"metadata":{},"sourceType":"module"}