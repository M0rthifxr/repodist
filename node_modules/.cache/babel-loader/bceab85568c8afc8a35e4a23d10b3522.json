{"ast":null,"code":"import{RoomObjectCategory,RoomObjectUserType}from'@nitrots/nitro-renderer';import{useCallback,useEffect,useState}from'react';import{RoomWidgetUpdateRoomObjectEvent}from'../../../../api';import{UseEventDispatcherHook,useFriends}from'../../../../hooks';import{useRoomContext}from'../../RoomContext';import{FriendRequestDialogView}from'./FriendRequestDialogView';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export const FriendRequestWidgetView=props=>{const[displayedRequests,setDisplayedRequests]=useState([]);const[dismissedRequestIds,setDismissedRequestIds]=useState([]);const{roomSession=null,eventDispatcher=null}=useRoomContext();const{requests=[]}=useFriends();const hideFriendRequest=userId=>{setDismissedRequestIds(prevValue=>{if(prevValue.indexOf(userId)>=0)return prevValue;const newValue=[...prevValue];newValue.push(userId);return newValue;});};const onRoomWidgetUpdateRoomObjectEvent=useCallback(event=>{if(event.category!==RoomObjectCategory.UNIT)return;const userData=roomSession.userDataManager.getUserDataByIndex(event.id);if(userData&&userData.type===RoomObjectUserType.getTypeNumber(RoomObjectUserType.USER)){if(event.type===RoomWidgetUpdateRoomObjectEvent.USER_ADDED){const request=requests.find(request=>request.requesterUserId===userData.webID);if(!request||displayedRequests.find(request=>request.request.requesterUserId===userData.webID))return;const newValue=[...displayedRequests];newValue.push({roomIndex:userData.roomIndex,request});setDisplayedRequests(newValue);}return;}if(event.type===RoomWidgetUpdateRoomObjectEvent.USER_REMOVED){const index=displayedRequests.findIndex(request=>request.roomIndex===event.id);if(index===-1)return;const newValue=[...displayedRequests];newValue.splice(index,1);setDisplayedRequests(newValue);}},[roomSession,requests,displayedRequests]);UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.USER_ADDED,eventDispatcher,onRoomWidgetUpdateRoomObjectEvent);UseEventDispatcherHook(RoomWidgetUpdateRoomObjectEvent.USER_REMOVED,eventDispatcher,onRoomWidgetUpdateRoomObjectEvent);useEffect(()=>{if(!requests||!requests.length)return;const newDisplayedRequests=[];for(const request of requests){const userData=roomSession.userDataManager.getUserData(request.requesterUserId);if(!userData)continue;newDisplayedRequests.push({roomIndex:userData.roomIndex,request});}setDisplayedRequests(newDisplayedRequests);},[roomSession,requests]);if(!requests.length)return null;return/*#__PURE__*/_jsx(_Fragment,{children:displayedRequests.map((request,index)=>{if(dismissedRequestIds.indexOf(request.request.requesterUserId)>=0)return null;return/*#__PURE__*/_jsx(FriendRequestDialogView,{roomIndex:request.roomIndex,request:request.request,hideFriendRequest:hideFriendRequest},index);})});};","map":null,"metadata":{},"sourceType":"module"}