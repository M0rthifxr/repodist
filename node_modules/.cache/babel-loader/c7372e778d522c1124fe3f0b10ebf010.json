{"ast":null,"code":"import{Vector3d}from'../../../../../room';import{RoomObjectVariable}from'../../RoomObjectVariable';import{FurnitureAnimatedVisualization}from'./FurnitureAnimatedVisualization';import{FurniturePlanetSystemVisualizationPlanetObject}from'./FurniturePlanetSystemVisualizationPlanetObject';export class FurniturePlanetSystemVisualization extends FurnitureAnimatedVisualization{constructor(){super();this._planetIndex=void 0;this._planetNameIndex=void 0;this._offsetArray=void 0;this._rootPosition=void 0;this._offsetArray=[];this._rootPosition=new Vector3d();}dispose(){if(this._planetIndex){while(this._planetIndex.length>0){const planet=this._planetIndex.shift();planet.dispose();}}this._planetIndex=null;this._planetNameIndex=null;}updateAnimation(scale){if(!this._planetIndex&&this.spriteCount>0){if(!this.processPlanets())return 0;}if(this._planetIndex){for(const planet of this._planetIndex)planet.update(this._offsetArray,this._rootPosition,scale);return super.updateAnimation(scale);}return 0;}getLayerXOffset(scale,direction,layerId){if(this._offsetArray[layerId]){return this._offsetArray[layerId].x;}return super.getLayerXOffset(scale,direction,layerId);}getLayerYOffset(scale,direction,layerId){if(this._offsetArray[layerId]){return this._offsetArray[layerId].y;}return super.getLayerYOffset(scale,direction,layerId);}getLayerZOffset(scale,direction,layerId){if(this._offsetArray[layerId]){return this._offsetArray[layerId].z;}return super.getLayerZOffset(scale,direction,layerId);}processPlanets(){if(!this.object||!this.object.model)return;const planetSystems=this.object.model.getValue(RoomObjectVariable.FURNITURE_PLANETSYSTEM_DATA);if(!planetSystems)return false;this._planetIndex=[];this._planetNameIndex=[];for(const planet of planetSystems){const sprite=this.getSprite(planet.id);if(sprite){this.addPlanet(planet.name,planet.id,planet.parent,planet.radius||0,planet.arcSpeed||0,planet.arcOffset||0,planet.height||0);}}return true;}addPlanet(name,index,parentName,radius,arcSpeed,arcOffset,height){if(!this._planetIndex)return;const planet=new FurniturePlanetSystemVisualizationPlanetObject(name,index,radius,arcSpeed,arcOffset,height);const existingPlanet=this.getPlanet(parentName);if(existingPlanet)existingPlanet.addChild(planet);else{this._planetIndex.push(planet);this._planetNameIndex.push(name);}}getPlanet(name){for(const planet of this._planetIndex){if(planet.name===name)return planet;if(planet.hasChild(name))return planet.getChild(name);}return null;}}","map":null,"metadata":{},"sourceType":"module"}