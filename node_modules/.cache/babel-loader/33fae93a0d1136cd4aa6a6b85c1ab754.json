{"ast":null,"code":"import{CampaignCalendarDataMessageEvent,CampaignCalendarDoorOpenedMessageEvent,OpenCampaignCalendarDoorAsStaffComposer,OpenCampaignCalendarDoorComposer}from'@nitrots/nitro-renderer';import{useCallback,useEffect,useState}from'react';import{AddEventLinkTracker,CalendarItem,RemoveLinkEventTracker,SendMessageComposer}from'../../api';import{UseMessageEventHook}from'../../hooks';import{CalendarView}from'./CalendarView';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export const CampaignView=props=>{const[calendarData,setCalendarData]=useState(null);const[lastOpenAttempt,setLastOpenAttempt]=useState(-1);const[receivedProducts,setReceivedProducts]=useState(new Map());const[isCalendarOpen,setCalendarOpen]=useState(false);const onCampaignCalendarDataMessageEvent=useCallback(event=>{const parser=event.getParser();if(!parser)return;setCalendarData(parser.calendarData);},[]);UseMessageEventHook(CampaignCalendarDataMessageEvent,onCampaignCalendarDataMessageEvent);const onCampaignCalendarDoorOpenedMessageEvent=useCallback(event=>{const parser=event.getParser();if(!parser)return;const lastAttempt=lastOpenAttempt;if(parser.doorOpened){setCalendarData(prev=>{const copy=prev.clone();copy.openedDays.push(lastOpenAttempt);return copy;});setReceivedProducts(prev=>{const copy=new Map(prev);copy.set(lastAttempt,new CalendarItem(parser.productName,parser.customImage,parser.furnitureClassName));return copy;});}setLastOpenAttempt(-1);},[lastOpenAttempt]);UseMessageEventHook(CampaignCalendarDoorOpenedMessageEvent,onCampaignCalendarDoorOpenedMessageEvent);const openPackage=useCallback(function(id){let asStaff=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!calendarData)return;setLastOpenAttempt(id);if(asStaff){SendMessageComposer(new OpenCampaignCalendarDoorAsStaffComposer(calendarData.campaignName,id));}else{SendMessageComposer(new OpenCampaignCalendarDoorComposer(calendarData.campaignName,id));}},[calendarData]);const onCalendarClose=useCallback(()=>{setCalendarOpen(false);},[]);const onLinkReceived=useCallback(link=>{const value=link.split('/');if(value.length<2)return;switch(value[1]){case'calendar':setCalendarOpen(true);break;}},[]);useEffect(()=>{const linkTracker={linkReceived:onLinkReceived,eventUrlPrefix:'openView/'};AddEventLinkTracker(linkTracker);return()=>{RemoveLinkEventTracker(linkTracker);};},[onLinkReceived]);return/*#__PURE__*/_jsx(_Fragment,{children:calendarData&&isCalendarOpen&&/*#__PURE__*/_jsx(CalendarView,{close:onCalendarClose,campaignName:calendarData.campaignName,currentDay:calendarData.currentDay,numDays:calendarData.campaignDays,openedDays:calendarData.openedDays,missedDays:calendarData.missedDays,openPackage:openPackage,receivedProducts:receivedProducts})});};","map":null,"metadata":{},"sourceType":"module"}