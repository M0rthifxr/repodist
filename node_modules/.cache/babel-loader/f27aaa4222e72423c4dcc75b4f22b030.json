{"ast":null,"code":"import{AnimationLayerData}from'./AnimationLayerData';import{DirectionalOffsetData}from'./DirectionalOffsetData';export class AnimationData{constructor(){this._layers=void 0;this._frameCount=void 0;this._randomStart=void 0;this._immediateChanges=void 0;this._layers=new Map();this._frameCount=-1;this._randomStart=false;this._immediateChanges=null;}static getTransitionToAnimationId(animationId){return AnimationData.TRANSITION_TO_ANIMATION_OFFSET+animationId;}static getTransitionFromAnimationId(animationId){return AnimationData.TRANSITION_FROM_ANIMATION_OFFSET+animationId;}static isTransitionToAnimation(animationId){return animationId>=AnimationData.TRANSITION_TO_ANIMATION_OFFSET&&animationId<AnimationData.TRANSITION_FROM_ANIMATION_OFFSET;}static isTransitionFromAnimation(animationId){return animationId>=AnimationData.TRANSITION_FROM_ANIMATION_OFFSET;}dispose(){for(const layer of this._layers.values()){if(!layer)continue;layer.dispose();}this._layers.clear();this._immediateChanges=null;}setImmediateChanges(k){this._immediateChanges=k;}isImmediateChange(k){if(!this._immediateChanges||this._immediateChanges.indexOf(k)===-1)return false;return true;}getStartFrame(direction){if(!this._randomStart)return 0;return Math.random()*this._frameCount;}initialize(k){if(k.randomStart)this._randomStart=true;if(k.layers){for(const key in k.layers){const layer=k.layers[key];if(!layer)return false;const animationId=parseInt(key);const loopCount=layer.loopCount!==undefined?layer.loopCount:1;const frameRepeat=layer.frameRepeat!==undefined?layer.frameRepeat:1;const isRandom=layer.random!==undefined&&layer.random!==0?true:false;if(!this.addLayer(animationId,loopCount,frameRepeat,isRandom,layer))return false;}}return true;}addLayer(animationId,loopCount,frameRepeat,isRandom,layer){const layerData=new AnimationLayerData(loopCount,frameRepeat,isRandom);if(layer.frameSequences){for(const key in layer.frameSequences){const animationSequence=layer.frameSequences[key];if(!animationSequence)continue;const loopCount=animationSequence.loopCount!==undefined?animationSequence.loopCount:1;const isSequenceRandom=animationSequence.random!==undefined&&animationSequence.random!==0?true:false;const frame=layerData.addFrameSequence(loopCount,isSequenceRandom);if(animationSequence.frames){for(const key in animationSequence.frames){const animationFrame=animationSequence.frames[key];if(!animationFrame){layerData.dispose();return false;}frame.addFrame(animationFrame.id,animationFrame.x||0,animationFrame.y||0,animationFrame.randomX||0,animationFrame.randomY||0,this.readDirectionalOffsets(animationFrame));}}frame.initialize();}}layerData.calculateLength();this._layers.set(animationId,layerData);const frameCount=layerData.frameCount;if(frameCount>this._frameCount)this._frameCount=frameCount;return true;}readDirectionalOffsets(frame){let directionalOffset=null;if(frame&&frame.offsets){for(const directionId in frame.offsets){const offset=frame.offsets[directionId];if(!offset)continue;if(!directionalOffset)directionalOffset=new DirectionalOffsetData();directionalOffset.setDirection(offset.direction,offset.x,offset.y);}}return directionalOffset;}getFrame(direction,layerId,frameCount){const layer=this._layers.get(layerId);if(!layer)return null;return layer.getFrame(direction,frameCount);}getFrameFromSequence(direction,layerId,sequenceId,offset,frameCount){const layer=this._layers.get(layerId);if(!layer)return null;return layer.getFrameFromSequence(direction,sequenceId,offset,frameCount);}}AnimationData.TRANSITION_TO_ANIMATION_OFFSET=1000000;AnimationData.TRANSITION_FROM_ANIMATION_OFFSET=2000000;AnimationData.DEFAULT_FRAME_NUMBER=0;","map":null,"metadata":{},"sourceType":"module"}