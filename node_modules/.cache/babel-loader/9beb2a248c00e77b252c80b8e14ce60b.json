{"ast":null,"code":"import{RoomObjectCategory}from'@nitrots/nitro-renderer';import{WiredSelectionFilter}from'.';import{GetRoomEngine}from'..';export class WiredSelectionVisualizer{static show(furniId){WiredSelectionVisualizer.applySelectionShader(WiredSelectionVisualizer.getRoomObject(furniId));}static hide(furniId){WiredSelectionVisualizer.clearSelectionShader(WiredSelectionVisualizer.getRoomObject(furniId));}static clearSelectionShaderFromFurni(furniIds){for(const furniId of furniIds){WiredSelectionVisualizer.clearSelectionShader(WiredSelectionVisualizer.getRoomObject(furniId));}}static applySelectionShaderToFurni(furniIds){for(const furniId of furniIds){WiredSelectionVisualizer.applySelectionShader(WiredSelectionVisualizer.getRoomObject(furniId));}}static getRoomObject(objectId){const roomEngine=GetRoomEngine();return roomEngine.getRoomObject(roomEngine.activeRoomId,objectId,RoomObjectCategory.FLOOR);}static applySelectionShader(roomObject){if(!roomObject)return;const visualization=roomObject.visualization;if(!visualization)return;for(const sprite of visualization.sprites){if(sprite.blendMode===1)continue;// BLEND_MODE: ADD\nsprite.filters=[WiredSelectionVisualizer._selectionShader];}}static clearSelectionShader(roomObject){if(!roomObject)return;const visualization=roomObject.visualization;if(!visualization)return;for(const sprite of visualization.sprites)sprite.filters=[];}}WiredSelectionVisualizer._selectionShader=new WiredSelectionFilter([1,1,1],[0.6,0.6,0.6]);","map":null,"metadata":{},"sourceType":"module"}