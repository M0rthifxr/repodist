{"ast":null,"code":"import{Disposable}from'../../core/common/disposable/Disposable';import{RequestPetInfoComposer}from'../communication/messages/outgoing/pet/RequestPetInfoComposer';import{UserCurrentBadgesComposer}from'../communication/messages/outgoing/user/data/UserCurrentBadgesComposer';export class UserDataManager extends Disposable{constructor(){super();this._connection=void 0;this._userDataByType=void 0;this._userDataByRoomIndex=void 0;this._userBadges=void 0;this._connection=null;this._userDataByType=new Map();this._userDataByRoomIndex=new Map();this._userBadges=new Map();}onDispose(){this._connection=null;}setConnection(connection){this._connection=connection;}getUserData(webID){return this.getDataByType(webID,UserDataManager.TYPE_USER);}getPetData(webID){return this.getDataByType(webID,UserDataManager.TYPE_PET);}getBotData(webID){return this.getDataByType(webID,UserDataManager.TYPE_BOT);}getRentableBotData(webID){return this.getDataByType(webID,UserDataManager.TYPE_RENTABLE_BOT);}getDataByType(webID,type){const existing=this._userDataByType.get(type);if(!existing)return null;const userData=existing.get(webID);if(!userData)return null;return userData;}getUserDataByIndex(roomIndex){const existing=this._userDataByRoomIndex.get(roomIndex);if(!existing)return null;return existing;}getUserDataByName(name){for(const userData of this._userDataByRoomIndex.values()){if(!userData||userData.name!==name)continue;return userData;}return null;}updateUserData(data){if(!data)return;this.removeUserData(data.roomIndex);let existingType=this._userDataByType.get(data.type);if(!existingType){existingType=new Map();this._userDataByType.set(data.type,existingType);}existingType.set(data.webID,data);this._userDataByRoomIndex.set(data.roomIndex,data);}removeUserData(roomIndex){const existing=this.getUserDataByIndex(roomIndex);if(!existing)return;this._userDataByRoomIndex.delete(roomIndex);const existingType=this._userDataByType.get(existing.type);if(existingType)existingType.delete(existing.webID);}getUserBadges(userId){if(this._connection){this._connection.send(new UserCurrentBadgesComposer(userId));}const badges=this._userBadges.get(userId);if(!badges)return[];return badges;}setUserBadges(userId,badges){this._userBadges.set(userId,badges);}updateFigure(roomIndex,figure,sex,hasSaddle,isRiding){const userData=this.getUserDataByIndex(roomIndex);if(!userData)return;userData.figure=figure;userData.sex=sex;userData.hasSaddle=hasSaddle;userData.isRiding=isRiding;}updateName(roomIndex,name){const userData=this.getUserDataByIndex(roomIndex);if(!userData)return;userData.name=name;}updateMotto(roomIndex,custom){const userData=this.getUserDataByIndex(roomIndex);if(!userData)return;userData.custom=custom;}updateAchievementScore(roomIndex,score){const userData=this.getUserDataByIndex(roomIndex);if(!userData)return;userData.activityPoints=score;}updatePetLevel(roomIndex,level){const userData=this.getUserDataByIndex(roomIndex);if(userData)userData.petLevel=level;}updatePetBreedingStatus(roomIndex,canBreed,canHarvest,canRevive,hasBreedingPermission){const userData=this.getUserDataByIndex(roomIndex);if(!userData)return;userData.canBreed=canBreed;userData.canHarvest=canHarvest;userData.canRevive=canRevive;userData.hasBreedingPermission=hasBreedingPermission;}requestPetInfo(id){if(!this._connection)return;const petData=this.getPetData(id);if(!petData)return;this._connection.send(new RequestPetInfoComposer(id));}get connection(){return this._connection;}}UserDataManager.TYPE_USER=1;UserDataManager.TYPE_PET=2;UserDataManager.TYPE_BOT=3;UserDataManager.TYPE_RENTABLE_BOT=4;","map":null,"metadata":{},"sourceType":"module"}