{"ast":null,"code":"import{AvatarCanvas}from'../structure/AvatarCanvas';import{AvatarSet}from'./AvatarSet';import{GeometryBodyPart}from'./GeometryBodyPart';import{Matrix4x4}from'./Matrix4x4';import{Vector3D}from'./Vector3D';export class AvatarModelGeometry{constructor(k){this._camera=void 0;this._avatarSet=void 0;this._geometryTypes=void 0;this._itemIdToBodyPartMap=void 0;this._transformation=void 0;this._canvases=void 0;this._camera=new Vector3D(0,0,10);this._avatarSet=new AvatarSet(k.avatarSets[0]);this._geometryTypes=new Map();this._itemIdToBodyPartMap=new Map();this._transformation=new Matrix4x4();this._canvases=new Map();const camera=k.camera;if(camera){this._camera.x=parseFloat(camera.x);this._camera.y=parseFloat(camera.y);this._camera.z=parseFloat(camera.z);}if(k.canvases&&k.canvases.length>0){for(const canvas of k.canvases){if(!canvas)continue;const scale=canvas.scale;const geometries=new Map();if(canvas.geometries&&canvas.geometries.length>0){for(const geometry of canvas.geometries){if(!geometry)continue;const avatarCanvas=new AvatarCanvas(geometry,scale);geometries.set(avatarCanvas.id,avatarCanvas);}}this._canvases.set(scale,geometries);}}if(k.types&&k.types.length>0){for(const type of k.types){if(!type)continue;const bodyParts=new Map();const itemIds=new Map();if(type.bodyParts&&type.bodyParts.length>0){for(const bodyPart of type.bodyParts){if(!bodyPart)continue;const geometryBodyPart=new GeometryBodyPart(bodyPart);bodyParts.set(geometryBodyPart.id,geometryBodyPart);for(const part of geometryBodyPart.getPartIds(null)){itemIds.set(part,geometryBodyPart);}}}this._geometryTypes.set(type.id,bodyParts);this._itemIdToBodyPartMap.set(type.id,itemIds);}}}removeDynamicItems(k){for(const geometry of this._geometryTypes.values()){if(!geometry)continue;for(const part of geometry.values()){if(!part)continue;part.removeDynamicParts(k);}}}getBodyPartIdsInAvatarSet(k){const avatarSet=this._avatarSet.findAvatarSet(k);if(!avatarSet)return[];return avatarSet.getBodyParts();}isMainAvatarSet(k){const avatarSet=this._avatarSet.findAvatarSet(k);if(!avatarSet)return false;return avatarSet.isMain;}getCanvas(k,_arg_2){const canvas=this._canvases.get(k);if(!canvas)return null;return canvas.get(_arg_2)||null;}typeExists(k){const existing=this._geometryTypes.get(k);if(existing)return true;return false;}hasBodyPart(k,_arg_2){if(this.typeExists(k)){const existing=this._geometryTypes.get(k);if(existing&&existing.get(_arg_2))return true;}return false;}getBodyPartIDs(k){const parts=this.getBodyPartsOfType(k);const types=[];if(parts){for(const part of parts.values()){if(!part)continue;types.push(part.id);}}return types;}getBodyPartsOfType(k){if(this.typeExists(k))return this._geometryTypes.get(k);return new Map();}getBodyPart(k,_arg_2){return this.getBodyPartsOfType(k).get(_arg_2)||null;}getBodyPartOfItem(k,_arg_2,_arg_3){const itemIds=this._itemIdToBodyPartMap.get(k);if(itemIds){const part=itemIds.get(_arg_2);if(part)return part;const parts=this.getBodyPartsOfType(k);if(parts){for(const part of parts.values()){if(!part)continue;if(part.hasPart(_arg_2,_arg_3))return part;}}}return null;}getBodyPartsInAvatarSet(k,_arg_2){const parts=this.getBodyPartIdsInAvatarSet(_arg_2);const geometryParts=[];for(const part of parts){if(!part)continue;const bodyPart=k.get(part);if(bodyPart){geometryParts.push(bodyPart);}}return geometryParts;}getBodyPartsAtAngle(k,_arg_2,_arg_3){if(!_arg_3)return[];const geometryParts=this.getBodyPartsOfType(_arg_3);const parts=this.getBodyPartsInAvatarSet(geometryParts,k);const sets=[];const ids=[];this._transformation=Matrix4x4.getYRotationMatrix(_arg_2);for(const part of parts.values()){if(!part)continue;part.applyTransform(this._transformation);sets.push([part.getDistance(this._camera),part]);}sets.sort((a,b)=>{const partA=a[0];const partB=b[0];if(partA<partB)return-1;if(partA>partB)return 1;return 0;});for(const set of sets){if(!set)continue;ids.push(set[1].id);}return ids;}getParts(k,_arg_2,_arg_3,_arg_4,_arg_5){if(this.hasBodyPart(k,_arg_2)){const part=this.getBodyPartsOfType(k).get(_arg_2);this._transformation=Matrix4x4.getYRotationMatrix(_arg_3);return part.getParts(this._transformation,this._camera,_arg_4,_arg_5);}return[];}}","map":null,"metadata":{},"sourceType":"module"}