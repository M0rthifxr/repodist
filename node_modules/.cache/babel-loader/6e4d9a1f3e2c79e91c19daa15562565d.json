{"ast":null,"code":"import{GroupBadgePartsComposer,GroupBadgePartsEvent,GroupPurchasedEvent,GroupSettingsComposer}from'@nitrots/nitro-renderer';import{useCallback,useEffect,useState}from'react';import{AddEventLinkTracker,RemoveLinkEventTracker,SendMessageComposer,TryVisitRoom}from'../../api';import{UseMessageEventHook}from'../../hooks';import{CompareId}from'./common/CompareId';import{GroupsContextProvider}from'./GroupsContext';import{GroupCreatorView}from'./views/GroupCreatorView';import{GroupInformationStandaloneView}from'./views/GroupInformationStandaloneView';import{GroupManagerView}from'./views/GroupManagerView';import{GroupMembersView}from'./views/GroupMembersView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const GroupsView=props=>{const[isCreatorVisible,setCreatorVisible]=useState(false);const[groupCustomize,setGroupCustomize]=useState(null);const onGroupPurchasedEvent=useCallback(event=>{const parser=event.getParser();setCreatorVisible(false);TryVisitRoom(parser.roomId);},[]);UseMessageEventHook(GroupPurchasedEvent,onGroupPurchasedEvent);const onGroupBadgePartsEvent=useCallback(event=>{const parser=event.getParser();const customize={badgeBases:[],badgeSymbols:[],badgePartColors:[],groupColorsA:[],groupColorsB:[]};parser.bases.forEach((images,id)=>customize.badgeBases.push({id,images}));parser.symbols.forEach((images,id)=>customize.badgeSymbols.push({id,images}));parser.partColors.forEach((color,id)=>customize.badgePartColors.push({id,color}));parser.colorsA.forEach((color,id)=>customize.groupColorsA.push({id,color}));parser.colorsB.forEach((color,id)=>customize.groupColorsB.push({id,color}));customize.badgeBases.sort(CompareId);customize.badgeSymbols.sort(CompareId);customize.badgePartColors.sort(CompareId);customize.groupColorsA.sort(CompareId);customize.groupColorsB.sort(CompareId);setGroupCustomize(customize);},[setGroupCustomize]);UseMessageEventHook(GroupBadgePartsEvent,onGroupBadgePartsEvent);const linkReceived=useCallback(url=>{const parts=url.split('/');if(parts.length<2)return;switch(parts[1]){case'create':setCreatorVisible(true);return;case'manage':if(!parts[2])return;setCreatorVisible(false);SendMessageComposer(new GroupSettingsComposer(Number(parts[2])));return;}},[]);useEffect(()=>{const linkTracker={linkReceived,eventUrlPrefix:'groups/'};AddEventLinkTracker(linkTracker);return()=>RemoveLinkEventTracker(linkTracker);},[linkReceived]);useEffect(()=>{SendMessageComposer(new GroupBadgePartsComposer());},[]);return/*#__PURE__*/_jsxs(GroupsContextProvider,{value:{groupCustomize,setGroupCustomize},children:[isCreatorVisible&&/*#__PURE__*/_jsx(GroupCreatorView,{onClose:()=>setCreatorVisible(false)}),!isCreatorVisible&&/*#__PURE__*/_jsx(GroupManagerView,{}),/*#__PURE__*/_jsx(GroupMembersView,{}),/*#__PURE__*/_jsx(GroupInformationStandaloneView,{})]});};","map":null,"metadata":{},"sourceType":"module"}