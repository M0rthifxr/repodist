{"ast":null,"code":"import{Palette}from'./figure/Palette';import{SetType}from'./figure/SetType';export class FigureSetData{constructor(){this._palettes=void 0;this._setTypes=void 0;this._palettes=new Map();this._setTypes=new Map();}dispose(){}parse(data){if(!data)return false;for(const palette of data.palettes){const newPalette=new Palette(palette);if(!newPalette)continue;this._palettes.set(newPalette.id.toString(),newPalette);}for(const set of data.setTypes){const newSet=new SetType(set);if(!newSet)continue;this._setTypes.set(newSet.type,newSet);}return true;}injectJSON(data){for(const setType of data.setTypes){const existingSetType=this._setTypes.get(setType.type);if(existingSetType)existingSetType.cleanUp(setType);else this._setTypes.set(setType.type,new SetType(setType));}this.appendJSON(data);}appendJSON(data){if(!data)return false;for(const palette of data.palettes){const id=palette.id.toString();const existingPalette=this._palettes.get(id);if(!existingPalette)this._palettes.set(id,new Palette(palette));else existingPalette.append(palette);}for(const setType of data.setTypes){const type=setType.type;const existingSetType=this._setTypes.get(type);if(!existingSetType)this._setTypes.set(type,new SetType(setType));else existingSetType.append(setType);}return false;}getMandatorySetTypeIds(k,_arg_2){const types=[];for(const set of this._setTypes.values()){if(!set||!set.isMandatory(k,_arg_2))continue;types.push(set.type);}return types;}getDefaultPartSet(k,_arg_2){const setType=this._setTypes.get(k);if(!setType)return null;return setType.getDefaultPartSet(_arg_2);}getSetType(k){return this._setTypes.get(k)||null;}getPalette(k){return this._palettes.get(k.toString())||null;}getFigurePartSet(k){for(const set of this._setTypes.values()){const partSet=set.getPartSet(k);if(!partSet)continue;return partSet;}return null;}}","map":null,"metadata":{},"sourceType":"module"}