{"ast":null,"code":"import{InitCameraMessageEvent,RequestCameraConfigurationComposer,RoomCameraWidgetManagerEvent,RoomSessionEvent}from'@nitrots/nitro-renderer';import{useCallback,useEffect,useState}from'react';import{AddEventLinkTracker,GetRoomCameraWidgetManager,RemoveLinkEventTracker,SendMessageComposer}from'../../api';import{UseCameraEvent,UseMessageEventHook,UseRoomSessionManagerEvent}from'../../hooks';import{CameraWidgetContextProvider}from'./CameraWidgetContext';import{CameraWidgetCaptureView}from'./views/capture/CameraWidgetCaptureView';import{CameraWidgetCheckoutView}from'./views/checkout/CameraWidgetCheckoutView';import{CameraWidgetEditorView}from'./views/editor/CameraWidgetEditorView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MODE_NONE=0;const MODE_CAPTURE=1;const MODE_EDITOR=2;const MODE_CHECKOUT=3;export const CameraWidgetView=props=>{const[mode,setMode]=useState(MODE_NONE);const[availableEffects,setAvailableEffects]=useState([]);const[cameraRoll,setCameraRoll]=useState([]);const[selectedPictureIndex,setSelectedPictureIndex]=useState(-1);const[myLevel,setMyLevel]=useState(10);const[base64Url,setSavedPictureUrl]=useState(null);const[price,setPrice]=useState(null);const onRoomCameraWidgetManagerEvent=useCallback(event=>{setAvailableEffects(Array.from(GetRoomCameraWidgetManager().effects.values()));},[]);UseCameraEvent(RoomCameraWidgetManagerEvent.INITIALIZED,onRoomCameraWidgetManagerEvent);const onCameraConfigurationEvent=useCallback(event=>{const parser=event.getParser();setPrice({credits:parser.creditPrice,duckets:parser.ducketPrice,publishDucketPrice:parser.publishDucketPrice});},[]);UseMessageEventHook(InitCameraMessageEvent,onCameraConfigurationEvent);const onRoomSessionEvent=useCallback(event=>{setMode(MODE_NONE);},[]);UseRoomSessionManagerEvent(RoomSessionEvent.ENDED,onRoomSessionEvent);useEffect(()=>{if(!GetRoomCameraWidgetManager().isLoaded){GetRoomCameraWidgetManager().init();SendMessageComposer(new RequestCameraConfigurationComposer());return;}},[]);const processAction=useCallback(type=>{switch(type){case'close':setMode(MODE_NONE);return;case'edit':setMode(MODE_EDITOR);return;case'delete':setCameraRoll(prevValue=>{const clone=[...prevValue];clone.splice(selectedPictureIndex,1);return clone;});return;case'editor_cancel':setMode(MODE_CAPTURE);return;}},[selectedPictureIndex]);const checkoutPictureUrl=useCallback(pictureUrl=>{setSavedPictureUrl(pictureUrl);setMode(MODE_CHECKOUT);},[]);const linkReceived=useCallback(url=>{const parts=url.split('/');if(parts.length<2)return;switch(parts[1]){case'show':setMode(MODE_CAPTURE);return;case'hide':setMode(MODE_NONE);return;case'toggle':setMode(prevValue=>{if(!prevValue)return MODE_CAPTURE;else return MODE_NONE;});return;}},[]);useEffect(()=>{const linkTracker={linkReceived,eventUrlPrefix:'camera/'};AddEventLinkTracker(linkTracker);return()=>RemoveLinkEventTracker(linkTracker);},[linkReceived]);if(mode===MODE_NONE)return null;return/*#__PURE__*/_jsxs(CameraWidgetContextProvider,{value:{cameraRoll,setCameraRoll,selectedPictureIndex,setSelectedPictureIndex},children:[mode===MODE_CAPTURE&&/*#__PURE__*/_jsx(CameraWidgetCaptureView,{onClose:()=>processAction('close'),onEdit:()=>processAction('edit'),onDelete:()=>processAction('delete')}),mode===MODE_EDITOR&&/*#__PURE__*/_jsx(CameraWidgetEditorView,{picture:cameraRoll[selectedPictureIndex],myLevel:myLevel,onClose:()=>processAction('close'),onCancel:()=>processAction('editor_cancel'),onCheckout:checkoutPictureUrl,availableEffects:availableEffects}),mode===MODE_CHECKOUT&&/*#__PURE__*/_jsx(CameraWidgetCheckoutView,{base64Url:base64Url,onCloseClick:()=>processAction('close'),onCancelClick:()=>processAction('editor_cancel'),price:price})]});};","map":null,"metadata":{},"sourceType":"module"}