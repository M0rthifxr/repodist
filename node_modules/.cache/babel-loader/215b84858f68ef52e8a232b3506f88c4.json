{"ast":null,"code":"import{BLEND_MODES}from'@pixi/constants';import{Texture}from'@pixi/core';import{Sprite}from'@pixi/sprite';import{NitroSprite}from'../../../core';import{TextureUtils}from'../../utils';export class ExtendedSprite extends Sprite{constructor(){let texture=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;super(texture);this._offsetX=void 0;this._offsetY=void 0;this._tag=void 0;this._alphaTolerance=void 0;this._varyingDepth=void 0;this._clickHandling=void 0;this._pairedSpriteId=void 0;this._pairedSpriteUpdateCounter=void 0;this.name=void 0;this._offsetX=0;this._offsetY=0;this._tag='';this._alphaTolerance=128;this._varyingDepth=false;this._clickHandling=false;this._pairedSpriteId=-1;this._pairedSpriteUpdateCounter=-1;}needsUpdate(pairedSpriteId,pairedSpriteUpdateCounter){if(this._pairedSpriteId===pairedSpriteId&&this._pairedSpriteUpdateCounter===pairedSpriteUpdateCounter)return false;this._pairedSpriteId=pairedSpriteId;this._pairedSpriteUpdateCounter=pairedSpriteUpdateCounter;return true;}calculateVertices(){if(!this.texture.orig)return;super.calculateVertices();}setTexture(texture){if(!texture)texture=Texture.EMPTY;if(texture===this.texture)return;if(texture===Texture.EMPTY){this._pairedSpriteId=-1;this._pairedSpriteUpdateCounter=-1;}this.texture=texture;}containsPoint(point){return ExtendedSprite.containsPoint(this,point);}static containsPoint(sprite,point){if(!sprite||!point||sprite.alphaTolerance>255)return false;if(!(sprite instanceof Sprite))return false;if(sprite.texture===Texture.EMPTY||sprite.blendMode!==BLEND_MODES.NORMAL)return;const texture=sprite.texture;const baseTexture=texture.baseTexture;if(!texture||!baseTexture||!baseTexture.valid)return false;const x=point.x*sprite.scale.x;const y=point.y*sprite.scale.y;if(!sprite.getLocalBounds().contains(x,y))return false;//@ts-ignore\nif(!baseTexture.hitMap){let canvas=null;if(!baseTexture.resource){//@ts-ignore\nif(!texture.getLocalBounds){const tempSprite=new NitroSprite(texture);canvas=TextureUtils.generateCanvas(tempSprite);tempSprite.destroy();}else{canvas=TextureUtils.generateCanvas(texture);}}if(!ExtendedSprite.generateHitMap(baseTexture,canvas))return false;}//@ts-ignore\nconst hitMap=baseTexture.hitMap;let dx=x+texture.frame.x;let dy=y+texture.frame.y;if(texture.trim){dx-=texture.trim.x;dy-=texture.trim.y;}dx=Math.round(dx)*baseTexture.resolution;dy=Math.round(dy)*baseTexture.resolution;const ind=dx+dy*baseTexture.realWidth;const ind1=ind%32;const ind2=ind/32|0;return(hitMap[ind2]&1<<ind1)!==0;}static generateHitMap(baseTexture){let tempCanvas=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let canvas=null;let context=null;if(tempCanvas){canvas=tempCanvas;context=canvas.getContext('2d');}else{if(!baseTexture.resource)return false;//@ts-ignore\nconst source=baseTexture.resource.source;if(!source)return false;if(source.getContext){canvas=source;context=canvas.getContext('2d');}else if(source instanceof Image){canvas=document.createElement('canvas');canvas.width=source.width;canvas.height=source.height;context=canvas.getContext('2d');context.drawImage(source,0,0);}else return false;}const width=canvas.width;const height=canvas.height;const imageData=context.getImageData(0,0,width,height);const hitmap=new Uint32Array(Math.ceil(width*height/32));const threshold=128;for(let i=0;i<width*height;i++){const ind1=i%32;const ind2=i/32|0;if(imageData.data[i*4+3]>=threshold){hitmap[ind2]=hitmap[ind2]|1<<ind1;}}//@ts-ignore\nbaseTexture.hitMap=hitmap;return true;}get offsetX(){return this._offsetX;}set offsetX(offset){this._offsetX=offset;}get offsetY(){return this._offsetY;}set offsetY(offset){this._offsetY=offset;}get tag(){return this._tag;}set tag(tag){this._tag=tag;}get alphaTolerance(){return this._alphaTolerance;}set alphaTolerance(tolerance){this._alphaTolerance=tolerance;}get varyingDepth(){return this._varyingDepth;}set varyingDepth(flag){this._varyingDepth=flag;}get clickHandling(){return this._clickHandling;}set clickHandling(flag){this._clickHandling=flag;}}","map":null,"metadata":{},"sourceType":"module"}