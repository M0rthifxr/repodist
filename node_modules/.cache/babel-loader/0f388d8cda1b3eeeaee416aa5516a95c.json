{"ast":null,"code":"import{PlaneBitmapData}from'../../utils/PlaneBitmapData';import{FloorPlane}from'./FloorPlane';import{PlaneRasterizer}from'./PlaneRasterizer';export class FloorRasterizer extends PlaneRasterizer{initializePlanes(){if(!this.data)return;const floors=this.data.floors;if(floors&&floors.length)this.parseFloors(floors);}parseFloors(k){if(!k)return;for(const floorIndex in k){const floor=k[floorIndex];if(!floor)continue;const id=floor.id;const visualization=floor.visualizations;const plane=new FloorPlane();this.parseVisualizations(plane,visualization);if(!this.addPlane(id,plane))plane.dispose();}}render(canvas,id,width,height,scale,normal,useTexture){let offsetX=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;let offsetY=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;let maxX=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;let maxY=arguments.length>10&&arguments[10]!==undefined?arguments[10]:0;let timeSinceStartMs=arguments.length>11&&arguments[11]!==undefined?arguments[11]:0;let plane=this.getPlane(id);if(!plane)plane=this.getPlane(PlaneRasterizer.DEFAULT);if(!plane)return null;if(canvas)canvas.clear();let graphic=plane.render(canvas,width,height,scale,normal,useTexture,offsetX,offsetY);if(graphic&&graphic!==canvas){graphic=graphic.clone();if(!graphic)return null;}return new PlaneBitmapData(graphic,-1);}}","map":null,"metadata":{},"sourceType":"module"}