{"ast":null,"code":"import{PlaneMaskVisualization}from'./PlaneMaskVisualization';export class PlaneMask{constructor(){this._maskVisualizations=void 0;this._sizes=void 0;this._assetNames=void 0;this._lastMaskVisualization=void 0;this._lastSize=void 0;this._sizes=[];this._maskVisualizations=new Map();this._assetNames=new Map();this._lastMaskVisualization=null;this._lastSize=-1;}dispose(){if(this._maskVisualizations){for(const mask of this._maskVisualizations.values()){if(!mask)continue;mask.dispose();}this._maskVisualizations=null;}this._lastMaskVisualization=null;this._sizes=null;}createMaskVisualization(size){const existing=this._maskVisualizations.get(size);if(existing)return null;const visualization=new PlaneMaskVisualization();this._maskVisualizations.set(size,visualization);this._sizes.push(size);this._sizes.sort();return visualization;}getSizeIndex(k){let sizeIndex=0;const index=1;while(index<this._sizes.length){if(this._sizes[index]>k){if(this._sizes[index]-k<k-this._sizes[index-1])sizeIndex=index;break;}sizeIndex=index;}return sizeIndex;}getMaskVisualization(k){if(k===this._lastSize)return this._lastMaskVisualization;const sizeIndex=this.getSizeIndex(k);if(sizeIndex<this._sizes.length){this._lastMaskVisualization=this._maskVisualizations.get(this._sizes[sizeIndex]);}else{this._lastMaskVisualization=null;}this._lastSize=k;return this._lastMaskVisualization;}getGraphicAsset(k,_arg_2){const visualization=this.getMaskVisualization(k);if(!visualization)return null;return visualization.getAsset(_arg_2);}getAssetName(k){if(!this._assetNames)return null;return this._assetNames.get(k)||null;}setAssetName(k,_arg_2){if(!this._assetNames)return;this._assetNames.set(k,_arg_2);}}","map":null,"metadata":{},"sourceType":"module"}