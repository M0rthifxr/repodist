{"ast":null,"code":"import{AdvancedMap,NitroLogger}from'../../../../../core';import{RoomObjectVariable}from'../../RoomObjectVariable';import{FurnitureAnimatedVisualization}from'./FurnitureAnimatedVisualization';import{FurnitureParticleSystem}from'./FurnitureParticleSystem';export class FurnitureFireworksVisualization extends FurnitureAnimatedVisualization{constructor(){super(...arguments);this._particleSystems=void 0;this._currentParticleSystem=void 0;}dispose(){super.dispose();this._currentParticleSystem=null;if(this._particleSystems){for(const particleSystem of this._particleSystems.getValues())particleSystem.dispose();this._particleSystems=null;}}updateObject(scale,direction){if(super.updateObject(scale,direction)){if(!this._particleSystems){this._Str_18684();if(this._particleSystems)this._currentParticleSystem=this._particleSystems.getValue(scale);else NitroLogger.log('ERROR Particle systems could not be read! '+this.object.type);}else{if(scale!==this._scale||this._particleSystems.getValue(scale)!==this._currentParticleSystem){const particleSystem=this._particleSystems.getValue(scale);particleSystem._Str_17988(this._currentParticleSystem);if(this._currentParticleSystem)this._currentParticleSystem.reset();this._currentParticleSystem=particleSystem;}}return true;}return false;}updateSprites(scale,update,animation){super.updateSprites(scale,update,animation);if(this._currentParticleSystem)this._currentParticleSystem.updateSprites();}updateAnimation(scale){if(this._currentParticleSystem)this._currentParticleSystem.updateAnimation();return super.updateAnimation(scale);}setAnimation(id){if(this._currentParticleSystem)this._currentParticleSystem.setAnimation(id);super.setAnimation(id);}getLayerYOffset(scale,direction,layerId){if(this._currentParticleSystem&&this._currentParticleSystem.controlsSprite(layerId)){return this._currentParticleSystem.getLayerYOffset(scale,direction,layerId);}return super.getLayerYOffset(scale,direction,layerId);}_Str_18684(){if(!this.object||!this.object.model)return false;const fireworksData=this.object.model.getValue(RoomObjectVariable.FURNITURE_FIREWORKS_DATA);if(!fireworksData||!fireworksData.length)return false;this._particleSystems=new AdvancedMap();for(const particleData of fireworksData){const size=particleData.size;const particleSystem=new FurnitureParticleSystem(this);particleSystem.parseData(particleData);this._particleSystems.add(size,particleSystem);}return true;}}","map":null,"metadata":{},"sourceType":"module"}