{"ast":null,"code":"import{AdvancedMap,Nitro,NitroSettingsEvent,RoomEngineEvent,RoomEngineObjectEvent,RoomEngineSamplePlaybackEvent}from'../..';import{NitroManager}from'../../core/common/NitroManager';import{NitroSoundEvent}from'../events/NitroSoundEvent';import{MusicManager}from'./music/MusicManager';export class SoundManager extends NitroManager{constructor(){super();this._volumeSystem=void 0;this._volumeFurni=void 0;this._volumeTrax=void 0;this._internalSamples=void 0;this._furniSamples=void 0;this._furnitureBeingPlayed=void 0;this._musicManager=void 0;this._volumeSystem=0.5;this._volumeFurni=0.5;this._volumeTrax=0.5;this._internalSamples=new AdvancedMap();this._furniSamples=new AdvancedMap();this._furnitureBeingPlayed=new AdvancedMap();this._musicManager=new MusicManager();this.onEvent=this.onEvent.bind(this);}onInit(){this._musicManager.init();Nitro.instance.roomEngine.events.addEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE,this.onEvent);Nitro.instance.roomEngine.events.addEventListener(RoomEngineObjectEvent.REMOVED,this.onEvent);Nitro.instance.roomEngine.events.addEventListener(RoomEngineEvent.DISPOSED,this.onEvent);Nitro.instance.events.addEventListener(NitroSettingsEvent.SETTINGS_UPDATED,this.onEvent);Nitro.instance.events.addEventListener(NitroSoundEvent.PLAY_SOUND,this.onEvent);}onDispose(){if(this._musicManager){this._musicManager.dispose();this._musicManager=null;}Nitro.instance.roomEngine.events.removeEventListener(RoomEngineSamplePlaybackEvent.PLAY_SAMPLE,this.onEvent);Nitro.instance.roomEngine.events.removeEventListener(RoomEngineObjectEvent.REMOVED,this.onEvent);Nitro.instance.roomEngine.events.removeEventListener(RoomEngineEvent.DISPOSED,this.onEvent);Nitro.instance.events.removeEventListener(NitroSettingsEvent.SETTINGS_UPDATED,this.onEvent);Nitro.instance.events.removeEventListener(NitroSoundEvent.PLAY_SOUND,this.onEvent);}onEvent(event){switch(event.type){case RoomEngineSamplePlaybackEvent.PLAY_SAMPLE:{const castedEvent=event;this.playFurniSample(castedEvent.objectId,castedEvent.sampleId,castedEvent.pitch);return;}case RoomEngineObjectEvent.REMOVED:{const castedEvent=event;this.stopFurniSample(castedEvent.objectId);return;}case RoomEngineEvent.DISPOSED:{this._furnitureBeingPlayed.getKeys().forEach(objectId=>{this.stopFurniSample(objectId);});return;}case NitroSettingsEvent.SETTINGS_UPDATED:{const castedEvent=event;const volumeFurniUpdated=castedEvent.volumeFurni!==this._volumeFurni;this._volumeSystem=castedEvent.volumeSystem/100;this._volumeFurni=castedEvent.volumeFurni/100;this._volumeTrax=castedEvent.volumeTrax/100;if(volumeFurniUpdated)this.updateFurniSamplesVolume(this._volumeFurni);return;}case NitroSoundEvent.PLAY_SOUND:{const castedEvent=event;this.playInternalSample(castedEvent.sampleCode);return;}}}playSample(sample,volume){let pitch=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;sample.volume=volume;sample.currentTime=0;try{sample.play();}catch(e){console.log(e);}}playInternalSample(code){let sample=this._internalSamples.getValue(code);if(!sample){const sampleUrl=Nitro.instance.getConfiguration('sounds.url');sample=new Audio(sampleUrl.replace('%sample%',code));this._internalSamples.add(code,sample);}this.playSample(sample,this._volumeSystem);}playFurniSample(objectId,code,pitch){let sample=this._furniSamples.getValue(code);if(!sample){const sampleUrl=Nitro.instance.getConfiguration('external.samples.url');sample=new Audio(sampleUrl.replace('%sample%',code.toString()));this._furniSamples.add(code,sample);}if(!this._furnitureBeingPlayed.hasKey(objectId))this._furnitureBeingPlayed.add(objectId,code);sample.onended=event=>{this.stopFurniSample(objectId);};sample.onpause=event=>{this.stopFurniSample(objectId);};sample.onerror=event=>{this.stopFurniSample(objectId);};this.playSample(sample,this._volumeFurni,pitch);}stopInternalSample(code){const sample=this._internalSamples.getValue(code);if(!sample)return;try{sample.pause();}catch(e){console.log(e);}}stopFurniSample(objectId){const furnitureBeingPlayed=this._furnitureBeingPlayed.getValue(objectId);if(!furnitureBeingPlayed)return;const sample=this._furniSamples.getValue(furnitureBeingPlayed);this._furnitureBeingPlayed.remove(objectId);if(!sample)return;try{sample.pause();}catch(e){console.log(e);}}updateInternalSamplesVolume(volume){this._internalSamples.getValues().forEach(sample=>{sample.volume=volume;});}updateFurniSamplesVolume(volume){this._furniSamples.getValues().forEach(sample=>{sample.volume=volume;});}get musicManager(){return this._musicManager;}}","map":null,"metadata":{},"sourceType":"module"}