{"ast":null,"code":"export class Vector3d{constructor(){let x=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let y=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let z=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;this._x=void 0;this._y=void 0;this._z=void 0;this._length=void 0;this._x=x;this._y=y;this._z=z;this._length=NaN;}static sum(vector1,vector2){if(!vector1||!vector2)return null;return new Vector3d(vector1.x+vector2.x,vector1.y+vector2.y,vector1.z+vector2.z);}static dif(vector1,vector2){if(!vector1||!vector2)return null;return new Vector3d(vector1.x-vector2.x,vector1.y-vector2.y,vector1.z-vector2.z);}static product(vector,value){if(!vector)return null;return new Vector3d(vector.x*value,vector.y*value,vector.z*value);}static dotProduct(vector1,vector2){if(!vector1||!vector2)return 0;return vector1.x*vector2.x+vector1.y*vector2.y+vector1.z*vector2.z;}static crossProduct(vector1,vector2){if(!vector1||!vector2)return null;return new Vector3d(vector1.y*vector2.z-vector1.z*vector2.y,vector1.z*vector2.x-vector1.x*vector2.z,vector1.x*vector2.y-vector1.y*vector2.x);}static scalarProjection(vector1,vector2){if(!vector1||!vector2)return-1;const length=vector2.length;if(length>0){return(vector1.x*vector2.x+vector1.y*vector2.y+vector1.z*vector2.z)/length;}return-1;}static cosAngle(vector1,vector2){if(!vector1||!vector2)return 0;const totalLength=vector1.length*vector2.length;if(!totalLength)return 0;return Vector3d.dotProduct(vector1,vector2)/totalLength;}static isEqual(vector1,vector2){if(!vector1||!vector2)return false;if(vector1.x!==vector2.x||vector1.y!==vector2.y||vector1.z!==vector2.z)return false;return true;}negate(){this._x=-this._x;this._y=-this._y;this._z=-this._z;}add(vector){if(!vector)return;this._x+=vector.x;this._y+=vector.y;this._z+=vector.z;this._length=NaN;}subtract(vector){if(!vector)return;this._x-=vector.x;this._y-=vector.y;this._z-=vector.z;this._length=NaN;}multiply(amount){this._x*=amount;this._y*=amount;this._z*=amount;this._length=NaN;}divide(amount){if(!amount)return;this._x/=amount;this._y/=amount;this._z/=amount;this._length=NaN;}assign(vector){if(!vector)return;this._x=vector.x;this._y=vector.y;this._z=vector.z;this._length=NaN;}get x(){return this._x;}set x(k){this._x=k;this._length=NaN;}get y(){return this._y;}set y(k){this._y=k;this._length=NaN;}get z(){return this._z;}set z(k){this._z=k;this._length=NaN;}get length(){if(isNaN(this._length)){this._length=Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z);}return this._length;}toString(){return`[Vector3d: ${this._x}, ${this._y}, ${this._z}]`;}}","map":null,"metadata":{},"sourceType":"module"}