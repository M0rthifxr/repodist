{"ast":null,"code":"import{AddDataContainer}from'./AddDataContainer';import{AvatarAnimationLayerData}from'./AvatarAnimationLayerData';import{AvatarDataContainer}from'./AvatarDataContainer';import{DirectionDataContainer}from'./DirectionDataContainer';import{SpriteDataContainer}from'./SpriteDataContainer';export class Animation{constructor(k,_arg_2){this._id=void 0;this._description=void 0;this._frames=void 0;this._spriteData=void 0;this._avatarData=void 0;this._directionData=void 0;this._removeData=void 0;this._addData=void 0;this._overriddenActions=void 0;this._overrideFrames=void 0;this._resetOnToggle=void 0;this._id=_arg_2.name;this._description=this._id;this._frames=[];this._spriteData=null;this._avatarData=null;this._directionData=null;this._removeData=null;this._addData=null;this._overriddenActions=null;this._overrideFrames=null;this._resetOnToggle=_arg_2.resetOnToggle||false;if(_arg_2.sprites&&_arg_2.sprites.length){this._spriteData=[];for(const sprite of _arg_2.sprites)this._spriteData.push(new SpriteDataContainer(this,sprite));}if(_arg_2.avatars&&_arg_2.avatars.length)this._avatarData=new AvatarDataContainer(_arg_2.avatars[0]);if(_arg_2.directions&&_arg_2.directions.length)this._directionData=new DirectionDataContainer(_arg_2.directions[0]);if(_arg_2.removes&&_arg_2.removes.length){this._removeData=[];for(const remove of _arg_2.removes)this._removeData.push(remove.id);}if(_arg_2.adds&&_arg_2.adds.length){this._addData=[];for(const add of _arg_2.adds)this._addData.push(new AddDataContainer(add));}if(_arg_2.overrides&&_arg_2.overrides.length){this._overrideFrames=new Map();this._overriddenActions=new Map();for(const override of _arg_2.overrides){const name=override.name;const value=override.override;this._overriddenActions.set(value,name);const frames=[];this.parseFrames(frames,override.frames,k);this._overrideFrames.set(name,frames);}}this.parseFrames(this._frames,_arg_2.frames,k);}parseFrames(frames,_arg_2,_arg_3){if(!_arg_2||!_arg_2.length)return;for(const frame of _arg_2){let repeats=1;if(frame.repeats&&frame.repeats>1)repeats=frame.repeats;let index=0;while(index<repeats){const layers=[];if(frame.bodyparts&&frame.bodyparts.length){for(const bodyPart of frame.bodyparts){const definition=_arg_3.getActionDefinition(bodyPart.action);const layer=new AvatarAnimationLayerData(bodyPart,AvatarAnimationLayerData.BODYPART,definition);layers.push(layer);}}if(frame.fxs&&frame.fxs.length){for(const fx of frame.fxs){const definition=_arg_3.getActionDefinition(fx.action);const layer=new AvatarAnimationLayerData(fx,AvatarAnimationLayerData.FX,definition);layers.push(layer);}}frames.push(layers);index++;}}}frameCount(){let k=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(!k)return this._frames.length;if(this._overrideFrames){const _local_2=this._overrideFrames.get(k);if(_local_2)return _local_2.length;}return 0;}hasOverriddenActions(){if(!this._overriddenActions)return false;return this._overriddenActions.size>0;}overriddenActionNames(){if(!this._overriddenActions)return null;const keys=[];for(const key of this._overriddenActions.keys())keys.push(key);return keys;}overridingAction(k){if(!this._overriddenActions)return null;return this._overriddenActions.get(k);}getFrame(frameCount){let _arg_2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(frameCount<0)frameCount=0;let layers=[];if(!_arg_2){if(this._frames.length>0){layers=this._frames[frameCount%this._frames.length];}}else{const overrideLayers=this._overrideFrames.get(_arg_2);if(overrideLayers&&overrideLayers.length>0){layers=overrideLayers[frameCount%overrideLayers.length];}}return layers;}getAnimatedBodyPartIds(k){let _arg_2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const _local_3=[];for(const layer of this.getFrame(k,_arg_2)){if(layer.type===AvatarAnimationLayerData.BODYPART){_local_3.push(layer.id);}else if(layer.type===AvatarAnimationLayerData.FX){if(this._addData&&this._addData.length){for(const _local_5 of this._addData){if(_local_5.id===layer.id)_local_3.push(_local_5.align);}}}}return _local_3;}getLayerData(frameCount,spriteId){let _arg_3=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;for(const layer of this.getFrame(frameCount,_arg_3)){if(layer.id===spriteId)return layer;if(layer.type===AvatarAnimationLayerData.FX){if(this._addData&&this._addData.length){for(const addData of this._addData){if(addData.align===spriteId&&addData.id===layer.id)return layer;}}}}return null;}hasAvatarData(){return this._avatarData!==null;}hasDirectionData(){return this._directionData!==null;}hasAddData(){return this._addData!==null;}getAddData(k){if(this._addData){for(const _local_2 of this._addData){if(_local_2.id===k)return _local_2;}}return null;}get id(){return this._id;}get spriteData(){return this._spriteData||Animation.EMPTY_ARRAY;}get avatarData(){return this._avatarData;}get directionData(){return this._directionData;}get removeData(){return this._removeData||Animation.EMPTY_ARRAY;}get addData(){return this._addData||Animation.EMPTY_ARRAY;}toString(){return this._description;}get resetOnToggle(){return this._resetOnToggle;}}Animation.EMPTY_ARRAY=[];","map":null,"metadata":{},"sourceType":"module"}