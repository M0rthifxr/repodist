{"ast":null,"code":"import{RoomObjectLogicBase}from'../../../../room/object/logic/RoomObjectLogicBase';import{Vector3d}from'../../../../room/utils/Vector3d';import{ObjectMoveUpdateMessage}from'../../messages/ObjectMoveUpdateMessage';import{RoomObjectVariable}from'../RoomObjectVariable';export class MovingObjectLogic extends RoomObjectLogicBase{constructor(){super();this._liftAmount=void 0;this._location=void 0;this._locationDelta=void 0;this._lastUpdateTime=void 0;this._changeTime=void 0;this._updateInterval=void 0;this._liftAmount=0;this._location=new Vector3d();this._locationDelta=new Vector3d();this._lastUpdateTime=0;this._changeTime=0;this._updateInterval=MovingObjectLogic.DEFAULT_UPDATE_INTERVAL;}onDispose(){this._liftAmount=0;super.onDispose();}update(time){super.update(time);const locationOffset=this.getLocationOffset();const model=this.object&&this.object.model;if(model){if(locationOffset){if(this._liftAmount!==locationOffset.z){this._liftAmount=locationOffset.z;model.setValue(RoomObjectVariable.FURNITURE_LIFT_AMOUNT,this._liftAmount);}}else{if(this._liftAmount!==0){this._liftAmount=0;model.setValue(RoomObjectVariable.FURNITURE_LIFT_AMOUNT,this._liftAmount);}}}if(this._locationDelta.length>0||locationOffset){const vector=MovingObjectLogic.TEMP_VECTOR;let difference=this.time-this._changeTime;if(difference===this._updateInterval>>1)difference++;if(difference>this._updateInterval)difference=this._updateInterval;if(this._locationDelta.length>0){vector.assign(this._locationDelta);vector.multiply(difference/this._updateInterval);vector.add(this._location);}else{vector.assign(this._location);}if(locationOffset)vector.add(locationOffset);this.object.setLocation(vector);if(difference===this._updateInterval){this._locationDelta.x=0;this._locationDelta.y=0;this._locationDelta.z=0;}}this._lastUpdateTime=this.time;}setObject(object){super.setObject(object);if(object)this._location.assign(object.getLocation());}processUpdateMessage(message){if(!message)return;super.processUpdateMessage(message);if(message.location)this._location.assign(message.location);if(message instanceof ObjectMoveUpdateMessage)return this.processMoveMessage(message);}processMoveMessage(message){if(!message||!this.object||!message.location)return;this._changeTime=this._lastUpdateTime;this._locationDelta.assign(message.targetLocation);this._locationDelta.subtract(this._location);}getLocationOffset(){return null;}get lastUpdateTime(){return this._lastUpdateTime;}set updateInterval(interval){if(interval<=0)interval=1;this._updateInterval=interval;}}MovingObjectLogic.DEFAULT_UPDATE_INTERVAL=500;MovingObjectLogic.TEMP_VECTOR=new Vector3d();","map":null,"metadata":{},"sourceType":"module"}