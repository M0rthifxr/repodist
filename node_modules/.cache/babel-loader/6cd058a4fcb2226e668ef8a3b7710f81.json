{"ast":null,"code":"import{RoomObjectVariable}from'../../RoomObjectVariable';import{RoomObjectVisualizationType}from'../../RoomObjectVisualizationType';import{AnimationData}from'../data/AnimationData';import{AnimationFrame}from'../data/AnimationFrame';import{AnimationStateData}from'../data/AnimationStateData';import{FurnitureAnimatedVisualizationData}from'./FurnitureAnimatedVisualizationData';import{FurnitureVisualization}from'./FurnitureVisualization';export class FurnitureAnimatedVisualization extends FurnitureVisualization{constructor(){super();this._data=void 0;this._state=void 0;this._frameIncrease=void 0;this._animationData=void 0;this._animationScale=void 0;this._animationChangeTime=void 0;this._animatedLayerCount=void 0;this._directionChanged=void 0;this._state=-1;this._frameIncrease=1;this._animationData=new AnimationStateData();this._animationScale=0;this._animationChangeTime=0;this._animatedLayerCount=0;this._directionChanged=false;}initialize(data){if(!(data instanceof FurnitureAnimatedVisualizationData))return false;return super.initialize(data);}dispose(){super.dispose();if(this._animationData){this._animationData.dispose();this._animationData=null;}}get animatedLayerCount(){return this._animatedLayerCount;}get animationId(){return this._animationData.animationId;}getAnimationId(animationData){if(this.animationId!==FurnitureAnimatedVisualization.DEFAULT_ANIMATION_ID&&this._data.hasAnimation(this._animationScale,this.animationId))return this.animationId;return FurnitureAnimatedVisualization.DEFAULT_ANIMATION_ID;}updateObject(scale,direction){if(super.updateObject(scale,direction)){const state=this.object.getState(0);if(state!==this._state){this.setAnimation(state);this._state=state;this._animationChangeTime=this.object.model.getValue(RoomObjectVariable.FURNITURE_STATE_UPDATE_TIME)||0;}return true;}return false;}updateModel(scale){if(super.updateModel(scale)){if(this.usesAnimationResetting()){const updateTime=this.object.model.getValue(RoomObjectVariable.FURNITURE_STATE_UPDATE_TIME);if(updateTime>this._animationChangeTime){this._animationChangeTime=updateTime;this.setAnimation(this._state);}}const state=this.object.model.getValue(RoomObjectVariable.FURNITURE_AUTOMATIC_STATE_INDEX);if(!isNaN(state)){const animationId=this._data.getAnimationId(this._animationScale,state);this.setAnimation(animationId);}return true;}return false;}isPlayingTransition(animationData,animationId){if(!AnimationData.isTransitionFromAnimation(animationData.animationId)&&!AnimationData.isTransitionToAnimation(animationData.animationId))return false;if(animationId!==animationData.animationAfterTransitionId)return false;if(animationData.animationOver)return false;return true;}getCurrentState(animationData){const animationId=animationData.animationId;if(!AnimationData.isTransitionFromAnimation(animationId)&&!AnimationData.isTransitionToAnimation(animationId))return animationId;return animationData.animationAfterTransitionId;}setAnimation(animationId){if(!this._data)return;this.setSubAnimation(this._animationData,animationId,this._state>=0);}setSubAnimation(animationData,animationId){let _arg_3=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const currentAnimation=animationData.animationId;if(_arg_3){if(this.isPlayingTransition(animationData,animationId))return false;const state=this.getCurrentState(animationData);if(animationId!==state){if(!this._data.isImmediateChange(this._animationScale,animationId,state)){let transition=AnimationData.getTransitionFromAnimationId(state);if(this._data.hasAnimation(this._animationScale,transition)){animationData.animationAfterTransitionId=animationId;animationId=transition;}else{transition=AnimationData.getTransitionToAnimationId(animationId);if(this._data.hasAnimation(this._animationScale,transition)){animationData.animationAfterTransitionId=animationId;animationId=transition;}}}}else{if(AnimationData.isTransitionFromAnimation(animationData.animationId)){const transition=AnimationData.getTransitionToAnimationId(animationId);if(this._data.hasAnimation(this._animationScale,transition)){animationData.animationAfterTransitionId=animationId;animationId=transition;}}else if(!AnimationData.isTransitionToAnimation(animationData.animationId)){if(this.usesAnimationResetting()){const transition=AnimationData.getTransitionFromAnimationId(state);if(this._data.hasAnimation(this._animationScale,transition)){animationData.animationAfterTransitionId=animationId;animationId=transition;}else{const transition=AnimationData.getTransitionToAnimationId(animationId);if(this._data.hasAnimation(this._animationScale,transition)){animationData.animationAfterTransitionId=animationId;animationId=transition;}}}}}}if(currentAnimation!==animationId){animationData.animationId=animationId;return true;}return false;}getLastFramePlayed(layerId){return this._animationData.getLastFramePlayed(layerId);}resetAllAnimationFrames(){if(!this._animationData)return;this._animationData.setLayerCount(this._animatedLayerCount);}updateAnimation(scale){if(!this._data)return 0;if(scale!==this._animationScale){this._animationScale=scale;this._animatedLayerCount=this._data.getLayerCount(scale);this.resetAllAnimationFrames();}const update=this.updateAnimations(scale);this._directionChanged=false;return update;}updateAnimations(scale){if(this._animationData.animationOver&&!this._directionChanged)return 0;const update=this.updateFramesForAnimation(this._animationData,scale);if(this._animationData.animationOver){if(AnimationData.isTransitionFromAnimation(this._animationData.animationId)||AnimationData.isTransitionToAnimation(this._animationData.animationId)){this.setAnimation(this._animationData.animationAfterTransitionId);this._animationData.animationOver=false;}}return update;}updateFramesForAnimation(animationData,scale){if(animationData.animationOver&&!this._directionChanged)return 0;const animationId=this.getAnimationId(animationData);let frameCount=animationData.frameCounter;if(!frameCount)frameCount=this._data.getStartFrame(scale,animationId,this._direction);frameCount+=this.frameIncrease;animationData.frameCounter=frameCount;animationData.animationOver=true;let animationPlayed=false;let layerId=this._animatedLayerCount-1;let update=0;let layerUpdate=1<<this._animatedLayerCount-1;while(layerId>=0){let sequenceId=0;animationPlayed=animationData.getAnimationPlayed(layerId);if(!animationPlayed||this._directionChanged){let lastFramePlayed=animationData.getLastFramePlayed(layerId);let frame=animationData.getFrame(layerId);if(frame){if(frame.isLastFrame&&frame.remainingFrameRepeats<=this.frameIncrease){lastFramePlayed=true;}}if(this._directionChanged||!frame||frame.remainingFrameRepeats>=0&&(frame.remainingFrameRepeats=frame.remainingFrameRepeats-this.frameIncrease)<=0){sequenceId=AnimationFrame.SEQUENCE_NOT_DEFINED;if(frame)sequenceId=frame.activeSequence;if(sequenceId===AnimationFrame.SEQUENCE_NOT_DEFINED){frame=this._data.getFrame(scale,animationId,this._direction,layerId,frameCount);}else{frame=this._data.getFrameFromSequence(scale,animationId,this._direction,layerId,sequenceId,frame.activeSequenceOffset+frame.repeats,frameCount);}animationData.setFrame(layerId,frame);update=update|layerUpdate;}if(!frame||frame.remainingFrameRepeats==AnimationFrame.FRAME_REPEAT_FOREVER){lastFramePlayed=true;animationPlayed=true;}else{animationData.animationOver=false;}animationData.setLastFramePlayed(layerId,lastFramePlayed);animationData.setAnimationPlayed(layerId,animationPlayed);}layerUpdate=layerUpdate>>1;layerId--;}return update;}getFrameNumber(scale,layerId){const currentFrame=this._animationData.getFrame(layerId);if(!currentFrame)return super.getFrameNumber(scale,layerId);return currentFrame.id;}getLayerXOffset(scale,direction,layerId){const offset=super.getLayerXOffset(scale,direction,layerId);const currentFrame=this._animationData.getFrame(layerId);if(!currentFrame)return offset;return offset+currentFrame.x;}getLayerYOffset(scale,direction,layerId){const offset=super.getLayerYOffset(scale,direction,layerId);const currentFrame=this._animationData.getFrame(layerId);if(!currentFrame)return offset;return offset+currentFrame.y;}usesAnimationResetting(){return false;}setDirection(direction){if(this._direction===direction)return;super.setDirection(direction);this._directionChanged=true;}get frameIncrease(){return this._frameIncrease;}}FurnitureAnimatedVisualization.TYPE=RoomObjectVisualizationType.FURNITURE_ANIMATED;FurnitureAnimatedVisualization.DEFAULT_ANIMATION_ID=0;","map":null,"metadata":{},"sourceType":"module"}