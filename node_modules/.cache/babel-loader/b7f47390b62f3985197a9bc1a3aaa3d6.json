{"ast":null,"code":"import{NitroManager}from'../../../core/common/NitroManager';import{JukeboxPlayListFullMessageEvent}from'../../communication/messages/incoming/sound/JukeboxPlayListFullMessageEvent';import{JukeboxSongDisksMessageEvent}from'../../communication/messages/incoming/sound/JukeboxSongDisksMessageEvent';import{NowPlayingMessageEvent}from'../../communication/messages/incoming/sound/NowPlayingMessageEvent';import{TraxSongInfoMessageEvent}from'../../communication/messages/incoming/sound/TraxSongInfoMessageEvent';import{UserSongDisksInventoryMessageEvent}from'../../communication/messages/incoming/sound/UserSongDisksInventoryMessageEvent';import{GetSongInfoMessageComposer}from'../../communication/messages/outgoing/sound/GetSongInfoMessageComposer';import{Nitro}from'../../Nitro';import{RoomObjectSoundMachineEvent}from'../../room/events/RoomObjectSoundMachineEvent';import{SoundManagerEvent}from'../events/SoundManagerEvent';import{SongInfoEntry}from'./../../communication/messages/incoming/sound/SongInfoEntry';import{MusicPriorities}from'./MusicPriorities';export class MusicManager extends NitroManager{constructor(){super();this._timerInstance=void 0;this._songRequestList=void 0;this._requestedSongs=void 0;this._availableSongs=void 0;this._songRequestsPerPriority=void 0;this._currentEntryId=void 0;this._playPosition=void 0;this._isPlaying=void 0;this._timerInstance=null;this._songRequestList=[];this._requestedSongs=new Map();this._availableSongs=new Map();this._songRequestsPerPriority=[];this._currentEntryId=-1;this._playPosition=-1;this._isPlaying=false;this.onEvent=this.onEvent.bind(this);this._timerInstance=setInterval(this.onTick.bind(this),1000);}onInit(){Nitro.instance.communication.connection.addMessageEvent(new TraxSongInfoMessageEvent(this.onEvent));Nitro.instance.communication.connection.addMessageEvent(new UserSongDisksInventoryMessageEvent(this.onEvent));Nitro.instance.communication.connection.addMessageEvent(new NowPlayingMessageEvent(this.onNowPlayingMessageEvent.bind(this)));Nitro.instance.communication.connection.addMessageEvent(new JukeboxSongDisksMessageEvent(this.onEvent));Nitro.instance.communication.connection.addMessageEvent(new JukeboxPlayListFullMessageEvent(this.onEvent));Nitro.instance.roomEngine.events.addEventListener(RoomObjectSoundMachineEvent.JUKEBOX_INIT,this.onEvent);Nitro.instance.roomEngine.events.addEventListener(RoomObjectSoundMachineEvent.JUKEBOX_DISPOSE,this.onEvent);Nitro.instance.roomEngine.events.addEventListener(RoomObjectSoundMachineEvent.SOUND_MACHINE_INIT,this.onEvent);Nitro.instance.roomEngine.events.addEventListener(RoomObjectSoundMachineEvent.SOUND_MACHINE_DISPOSE,this.onEvent);this.events.addEventListener(SoundManagerEvent.TRAX_SONG_COMPLETE,this.onEvent);}onDispose(){if(this._timerInstance){clearInterval(this._timerInstance);this._timerInstance=null;}Nitro.instance.communication.connection.removeMessageEvent(new TraxSongInfoMessageEvent(this.onEvent));Nitro.instance.communication.connection.removeMessageEvent(new UserSongDisksInventoryMessageEvent(this.onEvent));Nitro.instance.communication.connection.removeMessageEvent(new NowPlayingMessageEvent(this.onNowPlayingMessageEvent.bind(this)));Nitro.instance.communication.connection.removeMessageEvent(new JukeboxSongDisksMessageEvent(this.onEvent));Nitro.instance.communication.connection.removeMessageEvent(new JukeboxPlayListFullMessageEvent(this.onEvent));Nitro.instance.roomEngine.events.removeEventListener(RoomObjectSoundMachineEvent.JUKEBOX_INIT,this.onEvent);Nitro.instance.roomEngine.events.removeEventListener(RoomObjectSoundMachineEvent.JUKEBOX_DISPOSE,this.onEvent);Nitro.instance.roomEngine.events.removeEventListener(RoomObjectSoundMachineEvent.SOUND_MACHINE_INIT,this.onEvent);Nitro.instance.roomEngine.events.removeEventListener(RoomObjectSoundMachineEvent.SOUND_MACHINE_DISPOSE,this.onEvent);this.events.removeEventListener(SoundManagerEvent.TRAX_SONG_COMPLETE,this.onEvent);}onEvent(event){}onTraxSongInfoMessageEvent(event){const parser=event.getParser();for(const song of parser.songs){const songAvailable=this._availableSongs.get(song.id)!==null;const areSamplesRequested=this._requestedSongs.get(song.id)!==null;if(!songAvailable){if(areSamplesRequested){//LoadTraxSong\n}const songInfoEntry=new SongInfoEntry(song.id,song.length,song.name,song.creator,song.data);this._availableSongs.set(song.id,songInfoEntry);const topRequestPriotityIndex=this.getTopRequestPriority();const songId=this.getSongIdRequestedAtPriority(topRequestPriotityIndex);}}}onNowPlayingMessageEvent(event){const parser=event.getParser();this._isPlaying=parser.currentSongId!==-1;if(parser.currentSongId>=0){this.playSong(parser.currentSongId,MusicPriorities.PRIORITY_ROOM_PLAYLIST,parser.syncCount/1000,0,1,1);}else{this.stopPlaying();}if(parser.nextSongId>=0)this.requestSong(parser.nextSongId,true);this._playPosition=parser.currentPosition;//Dispatch local event NowPlayingEvent\n}onTick(){if(this._songRequestList.length===0)return;Nitro.instance.communication.connection.send(new GetSongInfoMessageComposer(...this._songRequestList));this._songRequestList=[];}requestSong(songId,arg2){if(this._requestedSongs.get(songId)===null){this._requestedSongs.set(songId,arg2);this._songRequestList.push(songId);}}playSong(songId,priority){let startPos=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let playLength=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;let fadeInSeconds=arguments.length>4&&arguments[4]!==undefined?arguments[4]:0.5;let fadeOutSeconds=arguments.length>5&&arguments[5]!==undefined?arguments[5]:0.5;}stopPlaying(){this._currentEntryId=-1;this._playPosition=-1;this._isPlaying=false;}getTopRequestPriority(){return this._songRequestsPerPriority.length-1;}getSongIdRequestedAtPriority(priorityIndex){if(priorityIndex<0||priorityIndex>=MusicPriorities.PRIORITY_COUNT)return-1;if(!this._songRequestsPerPriority[priorityIndex])return-1;return this._songRequestsPerPriority[priorityIndex].songId;}get playPosition(){return this._playPosition;}set playPosition(value){this._playPosition=value;}}MusicManager.SKIP_POSITION_SET=-1;MusicManager.MAXIMUM_NOTIFY_PRIORITY=MusicPriorities.PRIORITY_ROOM_PLAYLIST;","map":null,"metadata":{},"sourceType":"module"}