{"ast":null,"code":"import{ColorConverter,NitroFilter}from'@nitrots/nitro-renderer';const vertex=`\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}`;const fragment=`\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec3 lineColor;\nuniform vec3 color;\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec3 colorLine = lineColor * currentColor.a;\n    vec3 colorOverlay = color * currentColor.a;\n\n    if(currentColor.r == 0.0 && currentColor.g == 0.0 && currentColor.b == 0.0 && currentColor.a > 0.0) {\n        gl_FragColor = vec4(colorLine.r, colorLine.g, colorLine.b, currentColor.a);\n    } else if(currentColor.a > 0.0) {\n        gl_FragColor = vec4(colorOverlay.r, colorOverlay.g, colorOverlay.b, currentColor.a);\n    }\n}`;export class WiredSelectionFilter extends NitroFilter{constructor(lineColor,color){super(vertex,fragment);this._lineColor=void 0;this._color=void 0;this.uniforms.lineColor=new Float32Array(3);this.uniforms.color=new Float32Array(3);this.lineColor=lineColor;this.color=color;}get lineColor(){return this._lineColor;}set lineColor(value){const arr=this.uniforms.lineColor;if(typeof value==='number'){ColorConverter.hex2rgb(value,arr);this._lineColor=value;}else{arr[0]=value[0];arr[1]=value[1];arr[2]=value[2];this._lineColor=ColorConverter.rgb2hex(arr);}}get color(){return this._color;}set color(value){const arr=this.uniforms.color;if(typeof value==='number'){ColorConverter.hex2rgb(value,arr);this._color=value;}else{arr[0]=value[0];arr[1]=value[1];arr[2]=value[2];this._color=ColorConverter.rgb2hex(arr);}}}","map":null,"metadata":{},"sourceType":"module"}