{"ast":null,"code":"import{Vector3d}from'../../../../../../room/utils/Vector3d';import{ObjectRolling}from'../../../../../room/utils/ObjectRolling';export class ObjectsRollingParser{constructor(){this._rollerId=void 0;this._itemsRolling=void 0;this._unitRolling=void 0;}flush(){this._rollerId=0;this._itemsRolling=[];this._unitRolling=null;return true;}parse(wrapper){if(!wrapper)return false;const x=wrapper.readInt();const y=wrapper.readInt();const nextX=wrapper.readInt();const nextY=wrapper.readInt();let totalItems=wrapper.readInt();while(totalItems>0){const id=wrapper.readInt();const height=parseFloat(wrapper.readString());const nextHeight=parseFloat(wrapper.readString());const rollingData=new ObjectRolling(id,new Vector3d(x,y,height),new Vector3d(nextX,nextY,nextHeight));this._itemsRolling.push(rollingData);totalItems--;}this._rollerId=wrapper.readInt();if(!wrapper.bytesAvailable)return true;const movementType=wrapper.readInt();const unitId=wrapper.readInt();const height=parseFloat(wrapper.readString());const nextHeight=parseFloat(wrapper.readString());switch(movementType){case 0:break;case 1:this._unitRolling=new ObjectRolling(unitId,new Vector3d(x,y,height),new Vector3d(nextX,nextY,nextHeight),ObjectRolling.MOVE);break;case 2:this._unitRolling=new ObjectRolling(unitId,new Vector3d(x,y,height),new Vector3d(nextX,nextY,nextHeight),ObjectRolling.SLIDE);break;}return true;}get rollerId(){return this._rollerId;}get itemsRolling(){return this._itemsRolling;}get unitRolling(){return this._unitRolling;}}","map":null,"metadata":{},"sourceType":"module"}