{"ast":null,"code":"import{NitroBaseTexture,NitroFilter}from'./proxy';const vertex=`\nattribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat3 projectionMatrix;\nvarying vec2 vTextureCoord;\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}`;const fragment=`\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform sampler2D lut;\nuniform int channel;\n\nvoid main(void) {\n    vec4 currentColor = texture2D(uSampler, vTextureCoord);\n    vec4 adjusted = currentColor;\n\n    if(currentColor.a > 0.0)\n    {\n        if(channel == 0)\n        {\n            adjusted = texture2D(lut, vec2((currentColor.r * 255.0 + 0.5) / 256.0, 0.5));\n        } else if(channel == 1) {\n            adjusted = texture2D(lut, vec2((currentColor.g * 255.0 + 0.5) / 256.0, 0.5));\n        } else if(channel == 2) {\n            adjusted = texture2D(lut, vec2((currentColor.b * 255.0 + 0.5) / 256.0, 0.5));\n        } else if(channel == 3) {\n            adjusted = texture2D(lut, vec2((currentColor.a * 255.0 + 0.5) / 256.0, 0.5));\n        }\n    }\n\n    gl_FragColor = vec4(adjusted.r, adjusted.g, adjusted.b, currentColor.a);\n}`;export class PaletteMapFilter extends NitroFilter{constructor(palette){let channel=arguments.length>1&&arguments[1]!==undefined?arguments[1]:PaletteMapFilter.CHANNEL_RED;super(vertex,fragment);this._lut=void 0;this._channel=void 0;this._channel=channel;let lut=[];lut=this.getLutForPalette(palette);this._lut=NitroBaseTexture.fromBuffer(Uint8Array.from(lut),lut.length/4,1,{mipmap:0,scaleMode:0});this.uniforms.lut=this._lut;this.uniforms.channel=this._channel;}getLutForPalette(data){const lut=[];for(let i=0;i<data.length;i++){// R\nlut[i*4+PaletteMapFilter.CHANNEL_RED]=data[i]>>16&0xFF;// G\nlut[i*4+PaletteMapFilter.CHANNEL_GREEN]=data[i]>>8&0xFF;// B\nlut[i*4+PaletteMapFilter.CHANNEL_BLUE]=data[i]&0xFF;// A\nlut[i*4+PaletteMapFilter.CHANNEL_ALPHA]=data[i]>>24&0xFF;}return lut;}get lut(){return this._lut;}get channel(){return this._channel;}}PaletteMapFilter.CHANNEL_RED=0;PaletteMapFilter.CHANNEL_GREEN=1;PaletteMapFilter.CHANNEL_BLUE=2;PaletteMapFilter.CHANNEL_ALPHA=3;","map":null,"metadata":{},"sourceType":"module"}