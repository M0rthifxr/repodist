{"ast":null,"code":"import{Point,Rectangle}from'@pixi/math';import{NitroContainer,NitroSprite}from'../../../core';import{TextureUtils}from'../../utils/TextureUtils';import{RoomObjectSprite}from'./RoomObjectSprite';export class RoomObjectSpriteVisualization{constructor(){this._id=void 0;this._object=void 0;this._asset=void 0;this._sprites=void 0;this._scale=void 0;this._updateObjectCounter=void 0;this._updateModelCounter=void 0;this._updateSpriteCounter=void 0;this._id=RoomObjectSpriteVisualization.VISUALIZATION_COUNTER++;this._object=null;this._asset=null;this._sprites=[];this._scale=-1;this._updateObjectCounter=-1;this._updateModelCounter=-1;this._updateSpriteCounter=-1;}initialize(data){return false;}update(geometry,time,update,skipUpdate){return;}reset(){this._scale=-1;}dispose(){if(this._sprites){while(this._sprites.length){const sprite=this._sprites[0];if(sprite)sprite.dispose();this._sprites.pop();}this._sprites=null;}this._object=null;this._asset=null;}getSprite(index){if(index>=0&&index<this._sprites.length)return this._sprites[index];return null;}getSpriteList(){return null;}createSprite(){return this.createSpriteAtIndex(this._sprites.length);}createSpriteAtIndex(index){const sprite=new RoomObjectSprite();if(index>=this._sprites.length){this._sprites.push(sprite);}else{this._sprites.splice(index,0,sprite);}return sprite;}createSprites(count){while(this._sprites.length>count){const sprite=this._sprites[this._sprites.length-1];if(sprite)sprite.dispose();this._sprites.pop();}while(this._sprites.length<count){this._sprites.push(new RoomObjectSprite());}}get image(){return this.getImage(0,-1);}getImage(bgColor,originalId){const boundingRectangle=this.getBoundingRectangle();if(boundingRectangle.width*boundingRectangle.height===0)return null;const spriteCount=this.totalSprites;const spriteList=[];let index=0;while(index<spriteCount){const objectSprite=this.getSprite(index);if(objectSprite&&objectSprite.visible&&objectSprite.texture)spriteList.push(objectSprite);index++;}spriteList.sort((a,b)=>{return b.relativeDepth-a.relativeDepth;});const container=new NitroContainer();index=0;while(index<spriteList.length){const objectSprite=spriteList[index];const texture=objectSprite.texture;if(texture){const sprite=new NitroSprite(texture);sprite.alpha=objectSprite.alpha/255;sprite.tint=objectSprite.color;sprite.x=objectSprite.offsetX;sprite.y=objectSprite.offsetY;sprite.blendMode=objectSprite.blendMode;sprite.filters=objectSprite.filters;if(objectSprite.flipH)sprite.scale.x=-1;if(objectSprite.flipV)sprite.scale.y=-1;container.addChild(sprite);}index++;}const texture=TextureUtils.generateTexture(container);if(!texture)return null;return texture;}getBoundingRectangle(){const totalSprites=this.totalSprites;const rectangle=new Rectangle();let iterator=0;while(iterator<totalSprites){const sprite=this.getSprite(iterator);if(sprite&&sprite.texture&&sprite.visible){const offsetX=sprite.flipH?-sprite.width+sprite.offsetX:sprite.offsetX;const offsetY=sprite.flipV?-sprite.height+sprite.offsetY:sprite.offsetY;const point=new Point(offsetX,offsetY);if(iterator===0){rectangle.x=point.x;rectangle.y=point.y;rectangle.width=sprite.width;rectangle.height=sprite.height;}else{if(point.x<rectangle.x)rectangle.x=point.x;if(point.y<rectangle.y)rectangle.y=point.y;if(point.x+sprite.width>rectangle.right)rectangle.width=point.x+sprite.width-rectangle.x;if(point.y+sprite.height>rectangle.bottom)rectangle.height=point.y+sprite.height-rectangle.y;}}iterator++;}return rectangle;}get instanceId(){return this._id;}get object(){return this._object;}set object(object){this._object=object;}get asset(){return this._asset;}set asset(asset){if(this._asset)this._asset.removeReference();this._asset=asset;if(this._asset)this._asset.addReference();}get sprites(){return this._sprites;}get totalSprites(){return this._sprites.length;}get updateObjectCounter(){return this._updateObjectCounter;}set updateObjectCounter(count){this._updateObjectCounter=count;}get updateModelCounter(){return this._updateModelCounter;}set updateModelCounter(count){this._updateModelCounter=count;}get updateSpriteCounter(){return this._updateSpriteCounter;}set updateSpriteCounter(count){this._updateSpriteCounter=count;}get spriteCount(){return this._sprites.length;}}RoomObjectSpriteVisualization.VISUALIZATION_COUNTER=0;","map":null,"metadata":{},"sourceType":"module"}