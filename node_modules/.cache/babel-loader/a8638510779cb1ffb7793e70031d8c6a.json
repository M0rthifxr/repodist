{"ast":null,"code":"import{NitroManager}from'../../core/common/NitroManager';import{SocketConnectionEvent}from'../../core/communication/events/SocketConnectionEvent';import{Nitro}from'../Nitro';import{NitroCommunicationDemo}from'./demo/NitroCommunicationDemo';import{NitroCommunicationDemoEvent}from'./demo/NitroCommunicationDemoEvent';import{NitroMessages}from'./NitroMessages';export class NitroCommunicationManager extends NitroManager{constructor(communication){super();this._communication=void 0;this._connection=void 0;this._messages=void 0;this._demo=void 0;this._communication=communication;this._connection=null;this._messages=new NitroMessages();this._demo=new NitroCommunicationDemo(this);this.onConnectionOpenedEvent=this.onConnectionOpenedEvent.bind(this);this.onConnectionClosedEvent=this.onConnectionClosedEvent.bind(this);this.onConnectionErrorEvent=this.onConnectionErrorEvent.bind(this);this.onConnectionAuthenticatedEvent=this.onConnectionAuthenticatedEvent.bind(this);}onInit(){if(this._connection)return;Nitro.instance.events.addEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED,this.onConnectionAuthenticatedEvent);this._connection=this._communication.createConnection(this);this._connection.registerMessages(this._messages);this._connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED,this.onConnectionOpenedEvent);this._connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED,this.onConnectionClosedEvent);this._connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR,this.onConnectionErrorEvent);if(this._demo)this._demo.init();this._connection.init(Nitro.instance.getConfiguration('socket.url'));}onDispose(){if(this._demo)this._demo.dispose();if(this._connection){this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED,this.onConnectionOpenedEvent);this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED,this.onConnectionClosedEvent);this._connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR,this.onConnectionErrorEvent);}Nitro.instance.events.removeEventListener(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED,this.onConnectionAuthenticatedEvent);super.onDispose();}onConnectionOpenedEvent(event){this.logger.log('Connection Initialized');}onConnectionClosedEvent(event){this.logger.log('Connection Closed');}onConnectionErrorEvent(event){this.logger.log('Connection Error');}onConnectionAuthenticatedEvent(event){this.logger.log('Connection Authenticated');if(this._connection)this._connection.authenticated();}connectionInit(socketUrl){this.logger.log(`Initializing Connection: ${socketUrl}`);}registerMessageEvent(event){if(this._connection)this._connection.addMessageEvent(event);return event;}removeMessageEvent(event){if(!this._connection)return;this._connection.removeMessageEvent(event);}get demo(){return this._demo;}get connection(){return this._connection;}}","map":null,"metadata":{},"sourceType":"module"}