{"ast":null,"code":"import{PlaneBitmapData}from'../../utils/PlaneBitmapData';import{PlaneRasterizer}from'./PlaneRasterizer';import{WallPlane}from'./WallPlane';export class WallRasterizer extends PlaneRasterizer{initializePlanes(){if(!this.data)return;const walls=this.data.walls;if(walls&&walls.length)this.parseWalls(walls);}parseWalls(k){if(!k)return;for(const wallIndex in k){const wall=k[wallIndex];if(!wall)continue;const id=wall.id;const visualization=wall.visualizations;const plane=new WallPlane();this.parseVisualizations(plane,visualization);if(!this.addPlane(id,plane))plane.dispose();}}render(canvas,id,width,height,scale,normal,useTexture){let offsetX=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;let offsetY=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;let maxX=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;let maxY=arguments.length>10&&arguments[10]!==undefined?arguments[10]:0;let timeSinceStartMs=arguments.length>11&&arguments[11]!==undefined?arguments[11]:0;let plane=this.getPlane(id);if(!plane)plane=this.getPlane(PlaneRasterizer.DEFAULT);if(!plane)return null;if(canvas){const rectangle=canvas.getBounds();canvas.clear();canvas.drawRect(rectangle.x,rectangle.y,rectangle.width,rectangle.height);}let graphic=plane.render(canvas,width,height,scale,normal,useTexture);if(graphic&&graphic!==canvas){graphic=graphic.clone();if(!graphic)return null;}return new PlaneBitmapData(graphic,-1);}getTextureIdentifier(k,normal){if(normal){return`${k}_${normal.x}_${normal.y}_${normal.z}`;}return super.getTextureIdentifier(k,normal);}}","map":null,"metadata":{},"sourceType":"module"}