{"ast":null,"code":"import{AdvancedMap}from'../core/utils/AdvancedMap';import{RoomObject}from'./object/RoomObject';export class RoomObjectManager{constructor(){this._objects=void 0;this._objectsPerType=void 0;this._objects=new AdvancedMap();this._objectsPerType=new AdvancedMap();}dispose(){this.removeAllObjects();}getObject(id){const object=this._objects.getValue(id);if(!object)return null;return object;}getObjectByIndex(index){const object=this._objects.getWithIndex(index);if(!object)return null;return object;}createObject(id,stateCount,type){const object=new RoomObject(id,stateCount,type);return this.addObject(id,type,object);}addObject(id,type,object){if(this._objects.getValue(id)){object.dispose();return null;}this._objects.add(id,object);const typeMap=this.getTypeMap(type);if(typeMap)typeMap.add(id,object);return object;}removeObject(id){const object=this._objects.remove(id);if(object){const typeMap=this.getTypeMap(object.type);if(typeMap)typeMap.remove(object.id);object.dispose();}}removeAllObjects(){let i=0;while(i<this._objects.length){const object=this._objects.getWithIndex(i);if(object)object.dispose();i++;}this._objects.reset();i=0;while(i<this._objectsPerType.length){const typeMap=this._objectsPerType.getWithIndex(i);if(typeMap)typeMap.dispose();i++;}this._objectsPerType.reset();}getTypeMap(k){let _arg_2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let existing=this._objectsPerType.getValue(k);if(!existing&&_arg_2){existing=new AdvancedMap();this._objectsPerType.add(k,existing);}return existing;}get objects(){return this._objects;}get totalObjects(){return this._objects.length;}}","map":null,"metadata":{},"sourceType":"module"}