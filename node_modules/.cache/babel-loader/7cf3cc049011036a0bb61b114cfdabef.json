{"ast":null,"code":"import{GeometryItem}from'./GeometryItem';import{Node3D}from'./Node3D';export class GeometryBodyPart extends Node3D{constructor(k){super(parseFloat(k.x),parseFloat(k.y),parseFloat(k.z));this._id=void 0;this._radius=void 0;this._parts=void 0;this._dynamicParts=void 0;this._id=k.id;this._radius=parseFloat(k.radius);this._parts=new Map();this._dynamicParts=new Map();if(k.items&&k.items.length>0){for(const item of k.items){if(!item)continue;const geometryItem=new GeometryItem(item);this._parts.set(geometryItem.id,geometryItem);}}}getDynamicParts(k){const existing=this._dynamicParts.get(k);const parts=[];if(existing){for(const index in existing){const item=existing[index];if(!item)continue;parts.push(item);}}return parts;}getPartIds(k){const ids=[];for(const part of this._parts.values()){if(!part)continue;ids.push(part.id);}if(k){const existing=this._dynamicParts.get(k);if(existing){for(const index in existing){const part=existing[index];if(!part)continue;ids.push(part.id);}}}return ids;}removeDynamicParts(k){this._dynamicParts.delete(k);return true;}addPart(k,_arg_2){if(this.hasPart(k.id,_arg_2))return false;let existing=this._dynamicParts.get(_arg_2);if(!existing){existing={};this._dynamicParts.set(_arg_2,existing);}existing[k.id]=new GeometryItem(k,true);return true;}hasPart(k,_arg_2){let existingPart=this._parts.get(k)||null;if(!existingPart&&this._dynamicParts.get(_arg_2)!==undefined){existingPart=this._dynamicParts.get(_arg_2)[k]||null;}return existingPart!==null;}getParts(k,_arg_2,_arg_3,_arg_4){const parts=[];for(const part of this._parts.values()){if(!part)continue;part.applyTransform(k);parts.push([part.getDistance(_arg_2),part]);}const existingDynamic=this._dynamicParts.get(_arg_4);if(existingDynamic){for(const index in existingDynamic){const part=existingDynamic[index];if(!part)continue;part.applyTransform(k);parts.push([part.getDistance(_arg_2),part]);}}parts.sort((a,b)=>{const partA=a[0];const partB=b[0];if(partA<partB)return-1;if(partA>partB)return 1;return 0;});const partIds=[];for(const part of parts){if(!part)continue;partIds.push(part[1].id);}return partIds;}getDistance(k){const _local_2=Math.abs(k.z-this.transformedLocation.z-this._radius);const _local_3=Math.abs(k.z-this.transformedLocation.z+this._radius);return Math.min(_local_2,_local_3);}get id(){return this._id;}get radius(){return this._radius;}}","map":null,"metadata":{},"sourceType":"module"}