{"ast":null,"code":"import{Disposable}from'../core/common/disposable/Disposable';import{RoomObjectModel}from'./object/RoomObjectModel';export class RoomInstance extends Disposable{constructor(id,container){super();this._id=void 0;this._container=void 0;this._renderer=void 0;this._managers=void 0;this._updateCategories=void 0;this._model=void 0;this._id=id;this._container=container;this._renderer=null;this._managers=new Map();this._updateCategories=[];this._model=new RoomObjectModel();}onDispose(){this.removeAllManagers();this.destroyRenderer();this._container=null;this._model.dispose();}setRenderer(renderer){if(renderer===this._renderer)return;if(this._renderer)this.destroyRenderer();this._renderer=renderer;if(!this._renderer)return;this._renderer.reset();if(this._managers.size){for(const manager of this._managers.values()){if(!manager)continue;const objects=manager.objects;if(!objects.length)continue;for(const object of objects.getValues()){if(!object)continue;this._renderer.addObject(object);}}}}destroyRenderer(){if(!this._renderer)return;this._renderer.dispose();this._renderer=null;}getManager(category){const manager=this._managers.get(category);if(!manager)return null;return manager;}getManagerOrCreate(category){let manager=this.getManager(category);if(manager)return manager;manager=this._container.createRoomObjectManager(category);if(!manager)return null;this._managers.set(category,manager);return manager;}getTotalObjectsForManager(category){const manager=this.getManager(category);if(!manager)return 0;return manager.totalObjects;}getRoomObject(id,category){const manager=this.getManager(category);if(!manager)return null;const object=manager.getObject(id);if(!object)return null;return object;}getRoomObjectsForCategory(category){const manager=this.getManager(category);return manager?manager.objects.getValues():[];}getRoomObjectByIndex(index,category){const manager=this.getManager(category);if(!manager)return null;const object=manager.getObjectByIndex(index);if(!object)return null;return object;}createRoomObject(id,stateCount,type,category){const manager=this.getManagerOrCreate(category);if(!manager)return null;const object=manager.createObject(id,stateCount,type);if(!object)return null;if(this._renderer)this._renderer.addObject(object);return object;}createRoomObjectAndInitalize(objectId,type,category){if(!this._container)return null;return this._container.createRoomObjectAndInitalize(this._id,objectId,type,category);}removeRoomObject(id,category){const manager=this.getManager(category);if(!manager)return;const object=manager.getObject(id);if(!object)return;object.tearDown();if(this._renderer)this._renderer.removeObject(object);manager.removeObject(id);}removeAllManagers(){for(const manager of this._managers.values()){if(!manager)continue;if(this._renderer){const objects=manager.objects;if(objects.length){for(const object of objects.getValues()){if(!object)continue;this._renderer.removeObject(object);}}}manager.dispose();}this._managers.clear();}addUpdateCategory(category){const index=this._updateCategories.indexOf(category);if(index>=0)return;this._updateCategories.push(category);}removeUpdateCategory(category){const index=this._updateCategories.indexOf(category);if(index===-1)return;this._updateCategories.splice(index,1);}update(time){let update=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;for(const category of this._updateCategories){const manager=this.getManager(category);if(!manager)continue;const objects=manager.objects;if(!objects.length)continue;for(const object of objects.getValues()){if(!object)continue;const logic=object.logic;logic&&logic.update(time);}}this._renderer&&this._renderer.update(time,update);}hasUninitializedObjects(){for(const manager of this._managers.values()){if(!manager)continue;for(const object of manager.objects.getValues()){if(!object)continue;if(!object.isReady)return true;}}return false;}get id(){return this._id;}get container(){return this._container;}get renderer(){return this._renderer;}get managers(){return this._managers;}get model(){return this._model;}}","map":null,"metadata":{},"sourceType":"module"}