{"ast":null,"code":"import{RenderTexture}from'@pixi/core';import{Graphics}from'@pixi/graphics';import{Matrix,Point,Rectangle}from'@pixi/math';import{NitroContainer,NitroSprite}from'../../core';import{Nitro}from'../../nitro/Nitro';import{MouseEventType}from'../../nitro/ui/MouseEventType';import{RoomSpriteMouseEvent}from'../events/RoomSpriteMouseEvent';import{RoomObjectSpriteType}from'../object/enum/RoomObjectSpriteType';import{RoomRotatingEffect,RoomShakingEffect}from'../utils';import{RoomEnterEffect}from'../utils/RoomEnterEffect';import{RoomGeometry}from'../utils/RoomGeometry';import{Vector3d}from'../utils/Vector3d';import{RoomObjectCache}from'./cache/RoomObjectCache';import{ExtendedSprite}from'./utils/ExtendedSprite';import{ObjectMouseData}from'./utils/ObjectMouseData';import{SortableSprite}from'./utils/SortableSprite';export class RoomSpriteCanvas{constructor(container,id,width,height,scale){this._id=void 0;this._container=void 0;this._geometry=void 0;this._animationFPS=void 0;this._renderTimestamp=void 0;this._totalTimeRunning=void 0;this._lastFrame=void 0;this._master=void 0;this._display=void 0;this._mask=void 0;this._sortableSprites=void 0;this._spriteCount=void 0;this._activeSpriteCount=void 0;this._spritePool=void 0;this._skipObjectUpdate=void 0;this._runningSlow=void 0;this._width=void 0;this._height=void 0;this._renderedWidth=void 0;this._renderedHeight=void 0;this._screenOffsetX=void 0;this._screenOffsetY=void 0;this._mouseLocation=void 0;this._mouseOldX=void 0;this._mouseOldY=void 0;this._mouseCheckCount=void 0;this._mouseSpriteWasHit=void 0;this._mouseActiveObjects=void 0;this._eventCache=void 0;this._eventId=void 0;this._scale=void 0;this._SafeStr_4507=false;this._rotation=0;this._rotationOrigin=null;this._rotationRodLength=0;this._effectDirection=void 0;this._effectLocation=void 0;this._SafeStr_795=0;this._restrictsScaling=void 0;this._noSpriteVisibilityChecking=void 0;this._usesExclusionRectangles=void 0;this._usesMask=void 0;this._canvasUpdated=void 0;this._objectCache=void 0;this._mouseListener=void 0;this._id=id;this._container=container;this._geometry=new RoomGeometry(scale,new Vector3d(-135,30,0),new Vector3d(11,11,5),new Vector3d(-135,0.5,0));this._animationFPS=Nitro.instance.getConfiguration('system.animation.fps',24);this._renderTimestamp=0;this._totalTimeRunning=0;this._lastFrame=0;this._master=null;this._display=null;this._mask=null;this._sortableSprites=[];this._spriteCount=0;this._activeSpriteCount=0;this._spritePool=[];this._skipObjectUpdate=false;this._runningSlow=false;this._width=0;this._height=0;this._renderedWidth=0;this._renderedHeight=0;this._screenOffsetX=0;this._screenOffsetY=0;this._mouseLocation=new Point();this._mouseOldX=0;this._mouseOldY=0;this._mouseCheckCount=0;this._mouseSpriteWasHit=false;this._mouseActiveObjects=new Map();this._eventCache=new Map();this._eventId=0;this._scale=1;this._restrictsScaling=false;this._noSpriteVisibilityChecking=false;this._usesExclusionRectangles=false;this._usesMask=true;this._canvasUpdated=false;this._objectCache=new RoomObjectCache(this._container.roomObjectVariableAccurateZ);this._mouseListener=null;this.setupCanvas();this.initialize(width,height);}setupCanvas(){if(!this._master){this._master=new NitroSprite();this._master.interactiveChildren=false;}if(!this._display){const display=new NitroContainer();this._master.addChild(display);this._display=display;}}dispose(){this.cleanSprites(0,true);if(this._geometry){this._geometry.dispose();this._geometry=null;}if(this._mask)this._mask=null;if(this._objectCache){this._objectCache.dispose();this._objectCache=null;}if(this._master){while(this._master.children.length){const child=this._master.removeChildAt(0);child.destroy();}if(this._master.parent)this._master.parent.removeChild(this._master);this._master.destroy();this._master=null;}this._display=null;this._sortableSprites=[];if(this._mouseActiveObjects){this._mouseActiveObjects.clear();this._mouseActiveObjects=null;}if(this._spritePool){for(const sprite of this._spritePool){this.cleanSprite(sprite,true);}this._spritePool=[];}if(this._eventCache){this._eventCache.clear();this._eventCache=null;}this._mouseListener=null;}initialize(width,height){width=width<1?1:width;height=height<1?1:height;if(this._usesMask){if(!this._mask){this._mask=new Graphics().beginFill(0xFF0000).drawRect(0,0,width,height).endFill();if(this._master){this._master.addChild(this._mask);if(this._display)this._display.mask=this._mask;}}else{this._mask.clear().beginFill(0xFF0000).drawRect(0,0,width,height).endFill();}}if(this._master){if(this._master.hitArea){const hitArea=this._master.hitArea;hitArea.width=width;hitArea.height=height;}else{this._master.hitArea=new Rectangle(0,0,width,height);}if(this._master.filterArea){const filterArea=this._master.filterArea;filterArea.width=width;filterArea.height=height;}else{this._master.filterArea=new Rectangle(0,0,width,height);}}this._width=width;this._height=height;}setMask(flag){if(flag&&!this._usesMask){this._usesMask=true;if(this._mask&&this._mask.parent!==this._master){this._master.addChild(this._mask);this._display.mask=this._mask;}}else if(!flag&&this._usesMask){this._usesMask=false;if(this._mask&&this._mask.parent===this._master){this._master.removeChild(this._mask);this._display.mask=null;}}}setScale(scale){let point=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let offsetPoint=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let override=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let asDelta=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;if(!this._master||!this._display)return;if(this._restrictsScaling&&!override)return;if(!point)point=new Point(this._width/2,this._height/2);if(!offsetPoint)offsetPoint=point;point=this._display.toLocal(point);if(asDelta){this._scale*=scale;}else{this._scale=scale;}this.screenOffsetX=offsetPoint.x-point.x*this._scale;this.screenOffsetY=offsetPoint.y-point.y*this._scale;}render(time){let update=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;this._canvasUpdated=false;this._totalTimeRunning+=Nitro.instance.ticker.deltaTime;if(this._totalTimeRunning===this._renderTimestamp)return;if(time===-1)time=this._renderTimestamp+1;if(!this._container||!this._geometry)return;if(this._width!==this._renderedWidth||this._height!==this._renderedHeight)update=true;if(this._display.x!==this._screenOffsetX||this._display.y!==this._screenOffsetY){this._display.x=this._screenOffsetX;this._display.y=this._screenOffsetY;update=true;}if(this._display.scale.x!==this._scale){this._display.scale.set(this._scale);update=true;}this.doMagic();const frame=Math.round(this._totalTimeRunning/(60/this._animationFPS));let updateVisuals=false;if(frame!==this._lastFrame){this._lastFrame=frame;updateVisuals=true;}let spriteCount=0;const objects=this._container.objects;if(objects.size){for(const object of objects.values()){if(!object)continue;spriteCount=spriteCount+this.renderObject(object,object.instanceId.toString(),time,update,updateVisuals,spriteCount);}}this._sortableSprites.sort((a,b)=>{return b.z-a.z;});if(spriteCount<this._sortableSprites.length){this._sortableSprites.splice(spriteCount);}let iterator=0;while(iterator<spriteCount){const sprite=this._sortableSprites[iterator];if(sprite&&sprite.sprite)this.renderSprite(iterator,sprite);iterator++;}this.cleanSprites(spriteCount);if(update||updateVisuals)this._canvasUpdated=true;this._renderTimestamp=this._totalTimeRunning;this._renderedWidth=this._width;this._renderedHeight=this._height;}skipSpriteVisibilityChecking(){this._noSpriteVisibilityChecking=true;this.render(-1,true);}resumeSpriteVisibilityChecking(){this._noSpriteVisibilityChecking=false;}getSortableSpriteList(){return this._objectCache.getSortableSpriteList();}getPlaneSortableSprites(){return this._objectCache.getPlaneSortableSprites();}removeFromCache(identifier){this._objectCache.removeObjectCache(identifier);}renderObject(object,identifier,time,update,updateVisuals,count){if(!object)return 0;const visualization=object.visualization;if(!visualization){this.removeFromCache(identifier);return 0;}const cache=this.getCacheItem(identifier);cache.objectId=object.instanceId;const locationCache=cache.location;const sortableCache=cache.sprites;const vector=locationCache.updateLocation(object,this._geometry);if(!vector){this.removeFromCache(identifier);return 0;}if(updateVisuals)visualization.update(this._geometry,time,!sortableCache.isEmpty||update,this._skipObjectUpdate&&this._runningSlow);if(locationCache.locationChanged)update=true;if(!sortableCache.needsUpdate(visualization.instanceId,visualization.updateSpriteCounter)&&!update){return sortableCache.spriteCount;}let x=vector.x;let y=vector.y;let z=vector.z;if(x>0)z=z+x*1.2E-7;else z=z+-x*1.2E-7;x=x+Math.trunc(this._width/2);y=y+Math.trunc(this._height/2);let spriteCount=0;for(const sprite of visualization.sprites.values()){if(!sprite||!sprite.visible)continue;const texture=sprite.texture;const baseTexture=texture&&texture.baseTexture;if(!texture||!baseTexture)continue;const spriteX=x+sprite.offsetX+this._screenOffsetX;const spriteY=y+sprite.offsetY+this._screenOffsetY;if(sprite.flipH){const checkX=x+-(texture.width+-sprite.offsetX)+this._screenOffsetX;if(!this.isSpriteVisible(checkX,spriteY,texture.width,texture.height))continue;}else if(sprite.flipV){const checkY=y+-(texture.height+-sprite.offsetY)+this._screenOffsetY;if(!this.isSpriteVisible(spriteX,checkY,texture.width,texture.height))continue;}else{if(!this.isSpriteVisible(spriteX,spriteY,texture.width,texture.height))continue;}let sortableSprite=sortableCache.getSprite(spriteCount);if(!sortableSprite){sortableSprite=new SortableSprite();sortableCache.addSprite(sortableSprite);this._sortableSprites.push(sortableSprite);sortableSprite.name=identifier;}sortableSprite.sprite=sprite;if(sprite.spriteType===RoomObjectSpriteType.AVATAR||sprite.spriteType===RoomObjectSpriteType.AVATAR_OWN){sortableSprite.sprite.libraryAssetName='avatar_'+object.id;}sortableSprite.x=spriteX-this._screenOffsetX;sortableSprite.y=spriteY-this._screenOffsetY;sortableSprite.z=z+sprite.relativeDepth+3.7E-11*count;spriteCount++;count++;}sortableCache.setSpriteCount(spriteCount);this._canvasUpdated=true;return spriteCount;}getExtendedSprite(index){if(index<0||index>=this._spriteCount)return null;const sprite=this._display.getChildAt(index);if(!sprite)return null;return sprite;}getExtendedSpriteIdentifier(sprite){if(!sprite)return'';return sprite.name;}renderSprite(index,sprite){if(index>=this._spriteCount){this.createAndAddSprite(sprite);return true;}if(!sprite)return false;const objectSprite=sprite.sprite;const extendedSprite=this.getExtendedSprite(index);if(!objectSprite||!extendedSprite)return false;if(extendedSprite.varyingDepth!==objectSprite.varyingDepth){if(extendedSprite.varyingDepth&&!objectSprite.varyingDepth){this._display.removeChildAt(index);this._spritePool.push(extendedSprite);return this.renderSprite(index,sprite);}this.createAndAddSprite(sprite,index);return true;}if(extendedSprite.needsUpdate(objectSprite.id,objectSprite.updateCounter)||RoomEnterEffect.isVisualizationOn()){extendedSprite.tag=objectSprite.tag;extendedSprite.alphaTolerance=objectSprite.alphaTolerance;extendedSprite.name=sprite.name;extendedSprite.varyingDepth=objectSprite.varyingDepth;extendedSprite.clickHandling=objectSprite.clickHandling;extendedSprite.filters=objectSprite.filters;const alpha=objectSprite.alpha/255;if(extendedSprite.alpha!==alpha)extendedSprite.alpha=alpha;if(extendedSprite.tint!==objectSprite.color)extendedSprite.tint=objectSprite.color;if(extendedSprite.blendMode!==objectSprite.blendMode)extendedSprite.blendMode=objectSprite.blendMode;if(extendedSprite.texture!==objectSprite.texture)extendedSprite.setTexture(objectSprite.texture);if(objectSprite.updateContainer){const length=extendedSprite.children.length;if(length===1)extendedSprite.removeChildAt(0);extendedSprite.addChild(objectSprite.container);objectSprite.updateContainer=false;}if(objectSprite.flipH){if(extendedSprite.scale.x!==-1)extendedSprite.scale.x=-1;}else{if(extendedSprite.scale.x!==1)extendedSprite.scale.x=1;}if(objectSprite.flipV){if(extendedSprite.scale.y!==-1)extendedSprite.scale.y=-1;}else{if(extendedSprite.scale.y!==1)extendedSprite.scale.y=1;}this.updateEnterRoomEffect(extendedSprite,objectSprite);}if(extendedSprite.x!==sprite.x)extendedSprite.x=sprite.x;if(extendedSprite.y!==sprite.y)extendedSprite.y=sprite.y;extendedSprite.offsetX=objectSprite.offsetX;extendedSprite.offsetY=objectSprite.offsetY;return true;}createAndAddSprite(sortableSprite){let index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-1;const sprite=sortableSprite.sprite;if(!sprite)return;let extendedSprite=null;if(this._spritePool.length>0)extendedSprite=this._spritePool.pop();if(!extendedSprite)extendedSprite=new ExtendedSprite();if(extendedSprite.children.length)extendedSprite.removeChildren();extendedSprite.tag=sprite.tag;extendedSprite.alphaTolerance=sprite.alphaTolerance;extendedSprite.alpha=sprite.alpha/255;extendedSprite.tint=sprite.color;extendedSprite.x=sortableSprite.x;extendedSprite.y=sortableSprite.y;extendedSprite.offsetX=sprite.offsetX;extendedSprite.offsetY=sprite.offsetY;extendedSprite.name=sprite.name;extendedSprite.varyingDepth=sprite.varyingDepth;extendedSprite.clickHandling=sprite.clickHandling;extendedSprite.blendMode=sprite.blendMode;extendedSprite.filters=sprite.filters;extendedSprite.setTexture(sprite.texture);if(sprite.updateContainer){extendedSprite.addChild(sprite.container);sprite.updateContainer=false;}if(sprite.flipH)extendedSprite.scale.x=-1;if(sprite.flipV)extendedSprite.scale.y=-1;this.updateEnterRoomEffect(extendedSprite,sprite);if(index<0||index>=this._spriteCount){this._display.addChild(extendedSprite);this._spriteCount++;}else{this._display.addChildAt(extendedSprite,index);}this._activeSpriteCount++;}cleanSprites(spriteCount){let _arg_2=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!this._display)return;if(spriteCount<0)spriteCount=0;if(spriteCount<this._activeSpriteCount||!this._activeSpriteCount){let iterator=this._spriteCount-1;while(iterator>=spriteCount){this.cleanSprite(this.getExtendedSprite(iterator),_arg_2);iterator--;}}this._activeSpriteCount=spriteCount;}updateEnterRoomEffect(sprite,_arg_2){if(!RoomEnterEffect.isVisualizationOn()||!_arg_2)return;switch(_arg_2.spriteType){case RoomObjectSpriteType.AVATAR_OWN:return;case RoomObjectSpriteType.ROOM_PLANE:sprite.alpha=RoomEnterEffect.getDelta(0.9);return;case RoomObjectSpriteType.AVATAR:sprite.alpha=RoomEnterEffect.getDelta(0.5);return;default:sprite.alpha=RoomEnterEffect.getDelta(0.1);}}cleanSprite(sprite,_arg_2){if(!sprite)return;if(!_arg_2){sprite.setTexture(null);}else{if(sprite.parent)sprite.parent.removeChild(sprite);sprite.destroy({children:true});}}update(){if(!this._mouseCheckCount){//this.checkMouseHits(this._mouseLocation.x, this._mouseLocation.y, MouseEventType.MOUSE_MOVE);\n}this._mouseCheckCount=0;this._eventId++;}setMouseListener(listener){this._mouseListener=listener;}getCacheItem(id){return this._objectCache.getObjectCache(id);}isSpriteVisible(x,y,width,height){if(this._noSpriteVisibilityChecking)return true;x=(x-this._screenOffsetX)*this._scale+this._screenOffsetX;y=(y-this._screenOffsetY)*this._scale+this._screenOffsetY;width=width*this._scale;height=height*this._scale;if(x<this._width&&x+width>=0&&y<this._height&&y+height>=0){if(!this._usesExclusionRectangles)return true;}return false;}handleMouseEvent(x,y,type,altKey,ctrlKey,shiftKey,buttonDown){x=x-this._screenOffsetX;y=y-this._screenOffsetY;this._mouseLocation.x=x/this._scale;this._mouseLocation.y=y/this._scale;if(this._mouseCheckCount>0&&type==MouseEventType.MOUSE_MOVE)return this._mouseSpriteWasHit;this._mouseSpriteWasHit=this.checkMouseHits(Math.trunc(x/this._scale),Math.trunc(y/this._scale),type,altKey,ctrlKey,shiftKey,buttonDown);this._mouseCheckCount++;return this._mouseSpriteWasHit;}checkMouseHits(x,y,type){let altKey=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let ctrlKey=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;let shiftKey=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let buttonDown=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;const checkedSprites=[];let didHitSprite=false;let mouseEvent=null;let spriteId=this._activeSpriteCount-1;while(spriteId>=0){const extendedSprite=this.getExtendedSprite(spriteId);if(extendedSprite&&extendedSprite.containsPoint(new Point(x-extendedSprite.x,y-extendedSprite.y))){if(extendedSprite.clickHandling&&(type===MouseEventType.MOUSE_CLICK||type===MouseEventType.DOUBLE_CLICK)){//\n}else{const identifier=this.getExtendedSpriteIdentifier(extendedSprite);if(checkedSprites.indexOf(identifier)===-1){const tag=extendedSprite.tag;let mouseData=this._mouseActiveObjects.get(identifier);if(mouseData){if(mouseData.spriteTag!==tag){mouseEvent=this.createMouseEvent(0,0,0,0,MouseEventType.ROLL_OUT,mouseData.spriteTag,altKey,ctrlKey,shiftKey,buttonDown);this.bufferMouseEvent(mouseEvent,identifier);}}if(type===MouseEventType.MOUSE_MOVE&&(!mouseData||mouseData.spriteTag!==tag)){mouseEvent=this.createMouseEvent(x,y,x-extendedSprite.x,y-extendedSprite.y,MouseEventType.ROLL_OVER,tag,altKey,ctrlKey,shiftKey,buttonDown);}else{mouseEvent=this.createMouseEvent(x,y,x-extendedSprite.x,y-extendedSprite.y,type,tag,altKey,ctrlKey,shiftKey,buttonDown);mouseEvent.spriteOffsetX=extendedSprite.offsetX;mouseEvent.spriteOffsetY=extendedSprite.offsetY;}if(!mouseData){mouseData=new ObjectMouseData();mouseData.objectId=identifier;this._mouseActiveObjects.set(identifier,mouseData);}mouseData.spriteTag=tag;if(type!==MouseEventType.MOUSE_MOVE||x!==this._mouseOldX||y!==this._mouseOldY){this.bufferMouseEvent(mouseEvent,identifier);}checkedSprites.push(identifier);}didHitSprite=true;}}spriteId--;}const keys=[];for(const key of this._mouseActiveObjects.keys())key&&keys.push(key);let index=0;while(index<keys.length){const key=keys[index];if(checkedSprites.indexOf(key)>=0)keys[index]=null;index++;}index=0;while(index<keys.length){const key=keys[index];if(key!==null){const existing=this._mouseActiveObjects.get(key);if(existing)this._mouseActiveObjects.delete(key);const mouseEvent=this.createMouseEvent(0,0,0,0,MouseEventType.ROLL_OUT,existing.spriteTag,altKey,ctrlKey,shiftKey,buttonDown);this.bufferMouseEvent(mouseEvent,key);}index++;}this.processMouseEvents();this._mouseOldX=x;this._mouseOldY=y;return didHitSprite;}createMouseEvent(x,y,localX,localY,type,tag,altKey,ctrlKey,shiftKey,buttonDown){const screenX=x-this._width/2;const screenY=y-this._height/2;const canvasName=`canvas_${this._id}`;return new RoomSpriteMouseEvent(type,canvasName+'_'+this._eventId,canvasName,tag,screenX,screenY,localX,localY,ctrlKey,altKey,shiftKey,buttonDown);}bufferMouseEvent(k,_arg_2){if(!k||!this._eventCache)return;this._eventCache.delete(_arg_2);this._eventCache.set(_arg_2,k);}processMouseEvents(){if(!this._container||!this._eventCache)return;for(const[key,event]of this._eventCache.entries()){if(!this._eventCache)return;if(!event)continue;const roomObject=this._container.getRoomObject(parseInt(key));if(!roomObject)continue;if(this._mouseListener){this._mouseListener.processRoomCanvasMouseEvent(event,roomObject,this._geometry);}else{const logic=roomObject.mouseHandler;if(logic){logic.mouseEvent(event,this._geometry);}}}if(this._eventCache)this._eventCache.clear();}getDisplayAsTexture(){this._noSpriteVisibilityChecking=true;const k=this._scale;const _local_2=this._screenOffsetX;const _local_3=this._screenOffsetY;this.setScale(1,null,null,true);this._screenOffsetX=0;this._screenOffsetY=0;this.render(-1,true);this._display.mask=null;const bounds=this._display.getBounds();const renderTexture=RenderTexture.create({width:this._display.width,height:this._display.height});Nitro.instance.renderer.render(this._display,{renderTexture,clear:true,transform:new Matrix(1,0,0,1,-bounds.x,-bounds.y)});this._display.mask=this._mask;this._noSpriteVisibilityChecking=false;this.setScale(k,null,null,true);this._screenOffsetX=_local_2;this._screenOffsetY=_local_3;return renderTexture;}doMagic(){const geometry=this.geometry;if(this._rotation!==0){let direction=this._effectDirection;geometry.direction=new Vector3d(direction.x+this._rotation,direction.y,direction.z);direction=geometry.direction;geometry.setDepthVector(new Vector3d(direction.x,direction.y,5));const location=new Vector3d();location.assign(this._rotationOrigin);location.x=location.x+this._rotationRodLength*Math.cos((direction.x+180)/180*3.14159265358979)*Math.cos(direction.y/180*3.14159265358979);location.y=location.y+this._rotationRodLength*Math.sin((direction.x+180)/180*3.14159265358979)*Math.cos(direction.y/180*3.14159265358979);location.z=location.z+this._rotationRodLength*Math.sin(direction.y/180*3.14159265358979);geometry.location=location;this._effectLocation=new Vector3d();this._effectLocation.assign(location);this._effectDirection=new Vector3d();this._effectDirection.assign(geometry.direction);}if(RoomShakingEffect.isVisualizationOn()&&!this._SafeStr_4507){this.changeShaking();}else{if(!RoomShakingEffect.isVisualizationOn()&&this._SafeStr_4507)this.changeShaking();}if(RoomRotatingEffect.isVisualizationOn())this.changeRotation();if(this._SafeStr_4507){this._SafeStr_795++;const _local_4=this._effectDirection;const _local_1=Vector3d.sum(_local_4,new Vector3d(Math.sin(this._SafeStr_795*5/180*3.14159265358979)*2,Math.sin(this._SafeStr_795/180*3.14159265358979)*5,Math.sin(this._SafeStr_795*10/180*3.14159265358979)*2));geometry.direction=_local_1;}else{this._SafeStr_795=0;geometry.direction=this._effectDirection;}}changeShaking(){this._SafeStr_4507=!this._SafeStr_4507;if(this._SafeStr_4507){const direction=this.geometry.direction;this._effectDirection=new Vector3d(direction.x,direction.y,direction.z);}}changeRotation(){if(this._SafeStr_4507)return;const geometry=this.geometry;if(!geometry)return;if(this._rotation===0){const location=geometry.location;const directionAxis=geometry.directionAxis;this._effectLocation=new Vector3d();this._effectLocation.assign(location);this._effectDirection=new Vector3d();this._effectDirection.assign(geometry.direction);const intersection=RoomGeometry.getIntersectionVector(location,directionAxis,new Vector3d(0,0,0),new Vector3d(0,0,1));if(intersection!==null){this._rotationOrigin=new Vector3d(intersection.x,intersection.y,intersection.z);this._rotationRodLength=Vector3d.dif(intersection,location).length;this._rotation=1;}return;}this._rotation=0;geometry.location=this._effectLocation;geometry.direction=this._effectDirection;geometry.setDepthVector(new Vector3d(this._effectDirection.x,this._effectDirection.y,5));}moveLeft(){if(this._rotation!==0){if(this._rotation===1){this._rotation=-1;}else{this._rotation=this._rotation-1;}return;}const geometry=this.geometry;const direction=(geometry.direction.x-90)/180*3.14159265358979;geometry.location=Vector3d.sum(geometry.location,new Vector3d(Math.cos(direction)*Math.sqrt(2),Math.sin(direction)*Math.sqrt(2)));}moveRight(){if(this._rotation!==0){if(this._rotation===-1){this._rotation=1;}else{this._rotation=this._rotation+1;}return;}const geometry=this.geometry;const direction=(geometry.direction.x+90)/180*3.14159265358979;geometry.location=Vector3d.sum(geometry.location,new Vector3d(Math.cos(direction)*Math.sqrt(2),Math.sin(direction)*Math.sqrt(2)));}moveUp(){if(this._rotation!==0)return;const geometry=this.geometry;const direction=geometry.direction.x/180*3.14159265358979;geometry.location=Vector3d.sum(geometry.location,new Vector3d(Math.cos(direction)*Math.sqrt(2),Math.sin(direction)*Math.sqrt(2)));}moveDown(){if(this._rotation!==0)return;const geometry=this.geometry;const direction=(geometry.direction.x+180)/180*3.14159265358979;geometry.location=Vector3d.sum(geometry.location,new Vector3d(Math.cos(direction)*Math.sqrt(2),Math.sin(direction)*Math.sqrt(2)));}get id(){return this._id;}get geometry(){return this._geometry;}get master(){return this._master;}get display(){return this._display;}get screenOffsetX(){return this._screenOffsetX;}set screenOffsetX(x){x=Math.trunc(x);this._mouseLocation.x=this._mouseLocation.x-(x-this._screenOffsetX);this._screenOffsetX=x;}get screenOffsetY(){return this._screenOffsetY;}set screenOffsetY(y){y=Math.trunc(y);this._mouseLocation.y=this._mouseLocation.y-(y-this._screenOffsetY);this._screenOffsetY=y;}get scale(){return this._scale;}get width(){return this._width*this._scale;}get height(){return this._height*this._scale;}get restrictsScaling(){return this._restrictsScaling;}set restrictsScaling(flag){this._restrictsScaling=flag;}get canvasUpdated(){return this._canvasUpdated;}set canvasUpdated(flag){this._canvasUpdated=flag;}}","map":null,"metadata":{},"sourceType":"module"}