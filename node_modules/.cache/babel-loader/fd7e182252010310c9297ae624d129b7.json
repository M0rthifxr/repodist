{"ast":null,"code":"import{PlaneVisualization}from'./PlaneVisualization';export class Plane{constructor(){this._planeVisualizations=void 0;this._sizes=void 0;this._lastPlaneVisualization=void 0;this._lastSize=void 0;this._planeVisualizations=new Map();this._sizes=[];this._lastPlaneVisualization=null;this._lastSize=-1;}isStatic(size){return true;}dispose(){for(const visualization of this._planeVisualizations.values()){if(!visualization)continue;visualization.dispose();}this._planeVisualizations=null;this._lastPlaneVisualization=null;this._sizes=null;this._lastSize=-1;}clearCache(){for(const visualization of this._planeVisualizations.values()){if(!visualization)continue;visualization.clearCache();}}createPlaneVisualization(size,totalLayers,geometry){const existing=this._planeVisualizations.get(size.toString());if(existing)return null;const plane=new PlaneVisualization(size,totalLayers,geometry);this._planeVisualizations.set(size.toString(),plane);this._sizes.push(size);this._sizes.sort();return plane;}getSizeIndex(size){let sizeIndex=0;let i=1;while(i<this._sizes.length){if(this._sizes[i]>size){if(this._sizes[i]-size<size-this._sizes[i-1])sizeIndex=i;break;}sizeIndex=i;i++;}return sizeIndex;}getPlaneVisualization(size){if(size===this._lastSize)return this._lastPlaneVisualization;const sizeIndex=this.getSizeIndex(size);if(sizeIndex<this._sizes.length){this._lastPlaneVisualization=this._planeVisualizations.get(this._sizes[sizeIndex].toString());}else{this._lastPlaneVisualization=null;}this._lastSize=size;return this._lastPlaneVisualization;}getLayers(){return this.getPlaneVisualization(this._lastSize).getLayers();}}","map":null,"metadata":{},"sourceType":"module"}