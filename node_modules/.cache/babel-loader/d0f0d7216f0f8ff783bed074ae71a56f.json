{"ast":null,"code":"import{ActivePartSet}from'./parts/ActivePartSet';import{PartDefinition}from'./parts/PartDefinition';export class PartSetsData{constructor(){this._parts=void 0;this._activePartSets=void 0;this._parts=new Map();this._activePartSets=new Map();}parse(data){if(data.partSet&&data.partSet.length>0){for(const part of data.partSet){if(!part)continue;this._parts.set(part.setType,new PartDefinition(part));}}if(data.activePartSets&&data.activePartSets.length>0){for(const activePart of data.activePartSets){if(!activePart)continue;this._activePartSets.set(activePart.id,new ActivePartSet(activePart));}}return true;}appendJSON(data){if(data.partSet&&data.partSet.length>0){for(const part of data.partSet){if(!part)continue;this._parts.set(part.setType,new PartDefinition(part));}}if(data.activePartSets&&data.activePartSets.length>0){for(const activePart of data.activePartSets){if(!activePart)continue;this._activePartSets.set(activePart.id,new ActivePartSet(activePart));}}return false;}getActiveParts(k){const activePartSet=this._activePartSets.get(k.activePartSet);if(!activePartSet)return[];return activePartSet.parts;}getPartDefinition(part){const existing=this._parts.get(part);if(!existing)return null;return existing;}addPartDefinition(k){const _local_2=k.setType;let existing=this._parts.get(_local_2);if(!existing){existing=new PartDefinition(k);this._parts.set(_local_2,existing);}return existing;}getActivePartSet(k){const existing=this._activePartSets.get(k.activePartSet);if(!existing)return null;return existing;}get parts(){return this._parts;}get activePartSets(){return this._activePartSets;}}","map":null,"metadata":{},"sourceType":"module"}