{"ast":null,"code":"import classNames from'classnames';import{useCallback,useEffect,useMemo,useState}from'react';import ReactSlider from'react-slider';import{ColorUtils,GetConfiguration,LocalizeText,RoomWidgetDimmerChangeStateMessage,RoomWidgetDimmerPreviewMessage,RoomWidgetDimmerSavePresetMessage,RoomWidgetUpdateDimmerEvent,RoomWidgetUpdateDimmerStateEvent}from'../../../../../api';import{Base,Button,Column,Flex,Grid,NitroCardContentView,NitroCardHeaderView,NitroCardTabsItemView,NitroCardTabsView,NitroCardView,Text}from'../../../../../common';import{UseEventDispatcherHook}from'../../../../../hooks';import{useRoomContext}from'../../../RoomContext';import{DimmerFurnitureWidgetPresetItem}from'./DimmerFurnitureWidgetPresetItem';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const AVAILABLE_COLORS=[7665141,21495,15161822,15353138,15923281,8581961,0];const HTML_COLORS=['#74F5F5','#0053F7','#E759DE','#EA4532','#F2F851','#82F349','#000000'];const MIN_BRIGHTNESS=76;const MAX_BRIGHTNESS=255;export const FurnitureDimmerView=props=>{const[isVisible,setIsVisible]=useState(false);const[presets,setPresets]=useState([]);const[selectedPresetId,setSelectedPresetId]=useState(0);const[dimmerState,setDimmerState]=useState(0);const[lastDimmerState,setLastDimmerState]=useState(0);const[effectId,setEffectId]=useState(0);const[color,setColor]=useState(0xFFFFFF);const[brightness,setBrightness]=useState(0xFF);const[selectedEffectId,setSelectedEffectId]=useState(0);const[selectedColor,setSelectedColor]=useState(0);const[selectedBrightness,setSelectedBrightness]=useState(0);const{eventDispatcher=null,widgetHandler=null}=useRoomContext();const onNitroEvent=useCallback(event=>{switch(event.type){case RoomWidgetUpdateDimmerEvent.PRESETS:{const widgetEvent=event;const presets=[];for(const preset of widgetEvent.presets)presets.push(new DimmerFurnitureWidgetPresetItem(preset.id,preset.type,preset.color,preset.brightness));setPresets(presets);setSelectedPresetId(widgetEvent.selectedPresetId);setIsVisible(true);return;}case RoomWidgetUpdateDimmerEvent.HIDE:{setIsVisible(false);return;}case RoomWidgetUpdateDimmerStateEvent.DIMMER_STATE:{const widgetEvent=event;setLastDimmerState(dimmerState);setDimmerState(widgetEvent.state);setSelectedPresetId(widgetEvent.presetId);setEffectId(widgetEvent.effectId);setSelectedEffectId(widgetEvent.effectId);setColor(widgetEvent.color);setSelectedColor(widgetEvent.color);setBrightness(widgetEvent.brightness);setSelectedBrightness(widgetEvent.brightness);return;}}},[dimmerState]);UseEventDispatcherHook(RoomWidgetUpdateDimmerEvent.PRESETS,eventDispatcher,onNitroEvent);UseEventDispatcherHook(RoomWidgetUpdateDimmerEvent.HIDE,eventDispatcher,onNitroEvent);UseEventDispatcherHook(RoomWidgetUpdateDimmerStateEvent.DIMMER_STATE,eventDispatcher,onNitroEvent);const selectPresetId=useCallback(id=>{const preset=presets[id-1];if(!preset)return;setSelectedPresetId(preset.id);setSelectedEffectId(preset.type);setSelectedColor(preset.color);setSelectedBrightness(preset.light);},[presets]);const close=useCallback(()=>{widgetHandler.processWidgetMessage(new RoomWidgetDimmerPreviewMessage(color,brightness,effectId===2));setIsVisible(false);},[widgetHandler,color,brightness,effectId]);const toggleState=useCallback(()=>{widgetHandler.processWidgetMessage(new RoomWidgetDimmerChangeStateMessage());},[widgetHandler]);const applyChanges=useCallback(()=>{if(dimmerState===0)return;const selectedPresetIndex=selectedPresetId-1;if(selectedPresetId<1||selectedPresetId>presets.length)return;const preset=presets[selectedPresetIndex];if(!preset||selectedEffectId===preset.type&&selectedColor===preset.color&&selectedBrightness===preset.light)return;setPresets(prevValue=>{const newValue=[...prevValue];newValue[selectedPresetIndex]=new DimmerFurnitureWidgetPresetItem(preset.id,selectedEffectId,selectedColor,selectedBrightness);return newValue;});widgetHandler.processWidgetMessage(new RoomWidgetDimmerSavePresetMessage(preset.id,selectedEffectId,selectedColor,selectedBrightness,true));},[widgetHandler,dimmerState,selectedPresetId,presets,selectedEffectId,selectedColor,selectedBrightness]);const scaledBrightness=useCallback(value=>{return~~((value-MIN_BRIGHTNESS)*(100-0)/(MAX_BRIGHTNESS-MIN_BRIGHTNESS)+0);},[]);const isFreeColorMode=useMemo(()=>GetConfiguration('widget.dimmer.colorwheel',false),[]);useEffect(()=>{if(dimmerState===0&&lastDimmerState===0)return;widgetHandler.processWidgetMessage(new RoomWidgetDimmerPreviewMessage(selectedColor,selectedBrightness,selectedEffectId===2));},[widgetHandler,dimmerState,lastDimmerState,selectedColor,selectedBrightness,selectedEffectId]);if(!isVisible)return null;return/*#__PURE__*/_jsxs(NitroCardView,{className:\"nitro-room-widget-dimmer\",children:[/*#__PURE__*/_jsx(NitroCardHeaderView,{headerText:LocalizeText('widget.dimmer.title'),onCloseClick:close}),dimmerState===1&&/*#__PURE__*/_jsx(NitroCardTabsView,{children:presets.map(preset=>/*#__PURE__*/_jsx(NitroCardTabsItemView,{isActive:selectedPresetId===preset.id,onClick:event=>selectPresetId(preset.id),children:LocalizeText(`widget.dimmer.tab.${preset.id}`)},preset.id))}),/*#__PURE__*/_jsxs(NitroCardContentView,{children:[dimmerState===0&&/*#__PURE__*/_jsxs(Column,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(Base,{className:\"dimmer-banner\"}),/*#__PURE__*/_jsx(Text,{center:true,className:\"bg-muted rounded p-1\",children:LocalizeText('widget.dimmer.info.off')}),/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"success\",onClick:toggleState,children:LocalizeText('widget.dimmer.button.on')})]}),dimmerState===1&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Column,{gap:1,children:[/*#__PURE__*/_jsx(Text,{fontWeight:\"bold\",children:LocalizeText('widget.backgroundcolor.hue')}),isFreeColorMode&&/*#__PURE__*/_jsx(\"input\",{type:\"color\",className:\"form-control\",value:ColorUtils.makeColorNumberHex(selectedColor),onChange:event=>setSelectedColor(ColorUtils.convertFromHex(event.target.value))}),!isFreeColorMode&&/*#__PURE__*/_jsx(Grid,{gap:1,columnCount:7,children:AVAILABLE_COLORS.map((color,index)=>{return/*#__PURE__*/_jsx(Column,{fullWidth:true,pointer:true,className:'color-swatch rounded'+classNames({' active':color===selectedColor}),onClick:()=>setSelectedColor(color),style:{backgroundColor:HTML_COLORS[index]}},index);})})]}),/*#__PURE__*/_jsxs(Column,{gap:1,children:[/*#__PURE__*/_jsx(Text,{fontWeight:\"bold\",children:LocalizeText('widget.backgroundcolor.lightness')}),/*#__PURE__*/_jsx(ReactSlider,{className:\"nitro-slider\",min:MIN_BRIGHTNESS,max:MAX_BRIGHTNESS,value:selectedBrightness,onChange:value=>setSelectedBrightness(value),thumbClassName:'thumb percent',renderThumb:(props,state)=>/*#__PURE__*/_jsx(\"div\",{...props,children:scaledBrightness(state.valueNow)})})]}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",gap:1,children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"checkbox\",checked:selectedEffectId===2,onChange:event=>setSelectedEffectId(event.target.checked?2:1)}),/*#__PURE__*/_jsx(Text,{children:LocalizeText('widget.dimmer.type.checkbox')})]}),/*#__PURE__*/_jsxs(Flex,{gap:1,children:[/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"danger\",onClick:toggleState,children:LocalizeText('widget.dimmer.button.off')}),/*#__PURE__*/_jsx(Button,{fullWidth:true,variant:\"success\",onClick:applyChanges,children:LocalizeText('widget.dimmer.button.apply')})]})]})]})]});};","map":null,"metadata":{},"sourceType":"module"}