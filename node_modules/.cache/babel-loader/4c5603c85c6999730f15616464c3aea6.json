{"ast":null,"code":"export class BinaryWriter{constructor(){this._buffer=void 0;this._position=void 0;this._buffer=new Uint8Array();this._position=0;}writeByte(byte){const array=new Uint8Array(1);array[0]=byte;this.appendArray(array);return this;}writeBytes(bytes){const array=new Uint8Array(bytes);this.appendArray(array);return this;}writeShort(short){const array=new Uint8Array(2);array[0]=short>>8;array[1]=short&0xFF;this.appendArray(array);return this;}writeInt(integer){const array=new Uint8Array(4);array[0]=integer>>24;array[1]=integer>>16;array[2]=integer>>8;array[3]=integer&0xFF;this.appendArray(array);return this;}writeString(string){let includeLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const array=new TextEncoder().encode(string);if(includeLength){this.writeShort(array.length);this.appendArray(array);}else{this.appendArray(array);}return this;}appendArray(array){if(!array)return;const mergedArray=new Uint8Array(this.position+array.length>this._buffer.length?this.position+array.length:this._buffer.length);mergedArray.set(this._buffer);mergedArray.set(array,this.position);this._buffer=mergedArray;this.position+=array.length;}getBuffer(){return this._buffer.buffer;}get position(){return this._position;}set position(pos){this._position=pos;}toString(encoding){return new TextDecoder(encoding).decode(this._buffer);}}","map":null,"metadata":{},"sourceType":"module"}