{"ast":null,"code":"import{RoomSpriteCanvas}from'./RoomSpriteCanvas';export class RoomRenderer{constructor(){this._objects=void 0;this._canvases=void 0;this._disposed=void 0;this._roomObjectVariableAccurateZ=void 0;this._objects=new Map();this._canvases=new Map();this._disposed=false;this._roomObjectVariableAccurateZ=null;}dispose(){if(this._disposed)return;if(this._canvases){for(const[key,canvas]of this._canvases.entries()){this._canvases.delete(key);if(!canvas)continue;canvas.dispose();}this._canvases=null;}if(this._objects){this._objects=null;}this._disposed=true;}reset(){this._objects.clear();}getInstanceId(object){if(!object)return-1;return object.instanceId;}getRoomObject(instanceId){return this._objects.get(instanceId);}addObject(object){if(!object)return;this._objects.set(this.getInstanceId(object),object);}removeObject(object){const instanceId=this.getInstanceId(object);this._objects.delete(instanceId);for(const canvas of this._canvases.values()){if(!canvas)continue;const spriteCanvas=canvas;spriteCanvas.removeFromCache(instanceId.toString());}}render(time){let update=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!this._canvases||!this._canvases.size)return;for(const canvas of this._canvases.values())canvas&&canvas.render(time,update);}update(time){let update=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!this._canvases||!this._canvases.size)return;this.render(time,update);for(const canvas of this._canvases.values())canvas&&canvas.update();}getCanvas(id){const existing=this._canvases.get(id);if(!existing)return;return existing;}createCanvas(id,width,height,scale){const existing=this._canvases.get(id);if(existing){existing.initialize(width,height);if(existing.geometry)existing.geometry.scale=scale;return existing;}const canvas=this.createSpriteCanvas(id,width,height,scale);if(!canvas)return;this._canvases.set(id,canvas);return canvas;}createSpriteCanvas(id,width,height,scale){return new RoomSpriteCanvas(this,id,width,height,scale);}removeCanvas(id){const existing=this._canvases.get(id);if(!existing)return;this._canvases.delete(id);existing.dispose();}get objects(){return this._objects;}get disposed(){return this._disposed;}get roomObjectVariableAccurateZ(){return this._roomObjectVariableAccurateZ;}set roomObjectVariableAccurateZ(z){this._roomObjectVariableAccurateZ=z;}}","map":null,"metadata":{},"sourceType":"module"}