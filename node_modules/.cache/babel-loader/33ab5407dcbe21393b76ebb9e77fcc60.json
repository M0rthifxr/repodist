{"ast":null,"code":"import{NitroManager}from'../common/NitroManager';import{ConfigurationEvent}from'./ConfigurationEvent';export class ConfigurationManager extends NitroManager{constructor(){super();this._definitions=void 0;this._pendingUrls=void 0;this._missingKeys=void 0;this._definitions=new Map();this._pendingUrls=[];this._missingKeys=[];this.onConfigurationLoaded=this.onConfigurationLoaded.bind(this);}onInit(){this.parseConfiguration(this.getDefaultConfig(),true);this._pendingUrls=this.getValue('config.urls').slice();this.loadNextConfiguration();}loadNextConfiguration(){if(!this._pendingUrls.length){this.dispatchConfigurationEvent(ConfigurationEvent.LOADED);return;}this.loadConfigurationFromUrl(this._pendingUrls[0]);}loadConfigurationFromUrl(url){if(!url||url===''){this.dispatchConfigurationEvent(ConfigurationEvent.FAILED);return;}fetch(url).then(response=>response.json()).then(data=>this.onConfigurationLoaded(data,url)).catch(err=>this.onConfigurationFailed(err));}onConfigurationLoaded(data,url){if(!data)return;if(this.parseConfiguration(data)){const index=this._pendingUrls.indexOf(url);if(index>=0)this._pendingUrls.splice(index,1);this.loadNextConfiguration();return;}this.dispatchConfigurationEvent(ConfigurationEvent.FAILED);}onConfigurationFailed(error){this.dispatchConfigurationEvent(ConfigurationEvent.FAILED);}dispatchConfigurationEvent(type){this.events&&this.events.dispatchEvent(new ConfigurationEvent(type));}parseConfiguration(data){let overrides=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!data)return false;try{const regex=new RegExp(/\\${(.*?)}/g);for(const key in data){let value=data[key];if(typeof value==='string')value=this.interpolate(value,regex);if(this._definitions.has(key)){if(overrides)this.setValue(key,value);}else{this.setValue(key,value);}}return true;}catch(e){this.logger.error(e.stack);return false;}}interpolate(value){let regex=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!regex)regex=new RegExp(/\\${(.*?)}/g);const pieces=value.match(regex);if(pieces&&pieces.length){for(const piece of pieces){const existing=this._definitions.get(this.removeInterpolateKey(piece));if(existing)value=value.replace(piece,existing);}}return value;}removeInterpolateKey(value){return value.replace('${','').replace('}','');}getValue(key){let value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let existing=this._definitions.get(key);if(existing===undefined){if(this._missingKeys.indexOf(key)>=0)return value;this._missingKeys.push(key);this.logger.warn(`Missing configuration key: ${key}`);existing=value;}return existing;}setValue(key,value){this._definitions.set(key,value);}getDefaultConfig(){//@ts-ignore\nreturn NitroConfig;}get definitions(){return this._definitions;}}","map":null,"metadata":{},"sourceType":"module"}