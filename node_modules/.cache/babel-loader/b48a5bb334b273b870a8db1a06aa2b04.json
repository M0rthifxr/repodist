{"ast":null,"code":"import{Point}from'@pixi/math';import{Vector3d}from'../../../room/utils/Vector3d';export class RoomWallData{constructor(){this._corners=void 0;this._endPoints=void 0;this._directions=void 0;this._lengths=void 0;this._leftTurns=void 0;this._borders=void 0;this._hideWalls=void 0;this._manuallyLeftCut=void 0;this._manuallyRightCut=void 0;this._addDuplicates=void 0;this._count=void 0;this._corners=[];this._endPoints=[];this._directions=[];this._lengths=[];this._leftTurns=[];this._borders=[];this._hideWalls=[];this._manuallyLeftCut=[];this._manuallyRightCut=[];this._addDuplicates=false;this._count=0;}addWall(k,_arg_2,_arg_3,_arg_4,_arg_5){if(this._addDuplicates||this.checkIsNotDuplicate(k,_arg_2,_arg_3,_arg_4,_arg_5)){this._corners.push(k);this._directions.push(_arg_2);this._lengths.push(_arg_3);this._borders.push(_arg_4);this._leftTurns.push(_arg_5);this._hideWalls.push(false);this._manuallyLeftCut.push(false);this._manuallyRightCut.push(false);this._count++;}}checkIsNotDuplicate(k,_arg_2,_arg_3,_arg_4,_arg_5){let _local_6=0;while(_local_6<this._count){if(this._corners[_local_6].x==k.x&&this._corners[_local_6].y==k.y&&this._directions[_local_6]==_arg_2&&this._lengths[_local_6]==_arg_3&&this._borders[_local_6]==_arg_4&&this._leftTurns[_local_6]==_arg_5){return false;}_local_6++;}return true;}get count(){return this._count;}getCorner(k){return this._corners[k];}getEndPoint(k){this.calculateWallEndPoints();return this._endPoints[k];}getLength(k){return this._lengths[k];}getDirection(k){return this._directions[k];}getBorder(k){return this._borders[k];}getHideWall(k){return this._hideWalls[k];}getLeftTurn(k){return this._leftTurns[k];}getManuallyLeftCut(k){return this._manuallyLeftCut[k];}getManuallyRightCut(k){return this._manuallyRightCut[k];}setHideWall(k,_arg_2){this._hideWalls[k]=_arg_2;}setLength(k,_arg_2){if(_arg_2<this._lengths[k]){this._lengths[k]=_arg_2;this._manuallyRightCut[k]=true;}}moveCorner(k,_arg_2){let _local_3;if(_arg_2>0&&_arg_2<this._lengths[k]){const corner=this._corners[k];_local_3=RoomWallData.WALL_DIRECTION_VECTORS[this.getDirection(k)];this._corners[k]=new Point(corner.x+_arg_2*_local_3.x,corner.y+_arg_2*_local_3.y);this._lengths[k]=this._lengths[k]-_arg_2;this._manuallyLeftCut[k]=true;}}calculateWallEndPoints(){let k;let _local_2;let _local_3;let _local_4;let _local_5;if(this._endPoints.length!=this.count){this._endPoints=[];k=0;while(k<this.count){_local_2=this.getCorner(k);_local_3=new Point(_local_2.x,_local_2.y);_local_4=RoomWallData.WALL_DIRECTION_VECTORS[this.getDirection(k)];_local_5=this.getLength(k);_local_3.x=_local_3.x+_local_4.x*_local_5;_local_3.y=_local_3.y+_local_4.y*_local_5;this._endPoints.push(_local_3);k++;}}}}RoomWallData.WALL_DIRECTION_VECTORS=[new Vector3d(1,0,0),new Vector3d(0,1,0),new Vector3d(-1,0,0),new Vector3d(0,-1,0)];RoomWallData.WALL_NORMAL_VECTORS=[new Vector3d(0,1,0),new Vector3d(-1,0,0),new Vector3d(0,-1,0),new Vector3d(1,0,0)];","map":null,"metadata":{},"sourceType":"module"}