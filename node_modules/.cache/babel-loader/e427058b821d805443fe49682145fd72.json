{"ast":null,"code":"import{RoomMapMaskData}from'./RoomMapMaskData';import{RoomPlaneBitmapMaskData}from'./RoomPlaneBitmapMaskData';export class RoomPlaneBitmapMaskParser{constructor(){this._masks=void 0;this._masks=new Map();}get maskCount(){return this._masks.size;}dispose(){if(this._masks){this.reset();this._masks=null;}}initialize(k){if(!k)return false;this._masks.clear();if(k.masks.length){for(const mask of k.masks){if(!mask)continue;const location=mask.locations.length?mask.locations[0]:null;if(!location)continue;this._masks.set(mask.id,new RoomPlaneBitmapMaskData(mask.type,location,mask.category));}}return true;}reset(){for(const mask of this._masks.values()){if(!mask)continue;mask.dispose();}this._masks.clear();}addMask(k,_arg_2,_arg_3,_arg_4){const mask=new RoomPlaneBitmapMaskData(_arg_2,_arg_3,_arg_4);this._masks.delete(k);this._masks.set(k,mask);}removeMask(k){const existing=this._masks.get(k);if(existing){this._masks.delete(k);existing.dispose();return true;}return false;}getXML(){const data=new RoomMapMaskData();for(const[key,mask]of this._masks.entries()){if(!mask)continue;const type=this.getMaskType(mask);const category=this.getMaskCategory(mask);const location=this.getMaskLocation(mask);if(type&&category&&location){const newMask={id:key,type:type,category:category,locations:[{x:location.x,y:location.y,z:location.z}]};data.masks.push(newMask);}}return data;}getMaskLocation(mask){if(!mask)return null;return mask.loc;}getMaskType(mask){if(!mask)return null;return mask.type;}getMaskCategory(mask){if(!mask)return null;return mask.category;}get masks(){return this._masks;}}","map":null,"metadata":{},"sourceType":"module"}