{"ast":null,"code":"import{Nitro}from'../../../../../../Nitro';import{PlaneBitmapData}from'../../utils/PlaneBitmapData';import{Randomizer}from'../../utils/Randomizer';import{PlaneRasterizer}from'../basic/PlaneRasterizer';import{PlaneVisualizationLayer}from'../basic/PlaneVisualizationLayer';import{LandscapePlane}from'./LandscapePlane';export class LandscapeRasterizer extends PlaneRasterizer{constructor(){super(...arguments);this._landscapeWidth=0;this._landscapeHeight=0;}initializeDimensions(k,_arg_2){if(k<0)k=0;if(_arg_2<0)_arg_2=0;this._landscapeWidth=k;this._landscapeHeight=_arg_2;return true;}initializePlanes(){if(!this.data)return;const landscapes=this.data.landscapes;if(landscapes&&landscapes.length)this.parseLandscapes(landscapes);}parseLandscapes(k){if(!k)return;const randomNumber=Math.trunc(Math.random()*654321);for(const landscapeIndex in k){const landscape=k[landscapeIndex];if(!landscape)continue;const id=landscape.id;const visualizations=landscape.animatedVisualizations;const plane=new LandscapePlane();for(const visualization of visualizations){if(!visualization)continue;const size=visualization.size;let horizontalAngle=LandscapePlane.HORIZONTAL_ANGLE_DEFAULT;let verticalAngle=LandscapePlane.VERTICAL_ANGLE_DEFAULT;if(visualization.horizontalAngle)horizontalAngle=visualization.horizontalAngle;if(visualization.verticalAngle)verticalAngle=visualization.verticalAngle;const basicLayers=visualization.layers;const animatedLayers=visualization.animationLayers;const totalBasicLayers=basicLayers&&basicLayers.length||0;const totalAnimatedLayers=animatedLayers&&animatedLayers.length||0;const totalLayers=totalBasicLayers+totalAnimatedLayers;const planeVisualization=plane.createPlaneVisualization(size,totalLayers||0,this.getGeometry(size,horizontalAngle,verticalAngle));if(planeVisualization){Randomizer.setSeed(randomNumber);let layerId=0;if(totalBasicLayers){while(layerId<basicLayers.length){const layer=basicLayers[layerId];if(layer){let material=null;let align=PlaneVisualizationLayer.ALIGN_DEFAULT;let color=LandscapePlane.DEFAULT_COLOR;let offset=PlaneVisualizationLayer.DEFAULT_OFFSET;if(layer.materialId)material=this.getMaterial(layer.materialId);if(layer.color)color=layer.color;if(layer.offset)offset=layer.offset;if(layer.align){if(layer.align==='bottom'){align=PlaneVisualizationLayer.ALIGN_BOTTOM;}else if(layer.align==='top')align=PlaneVisualizationLayer.ALIGN_TOP;}planeVisualization.setLayer(layerId,material,color,align,offset);}layerId++;}}layerId=0;if(totalAnimatedLayers){const animationItems=[];while(layerId<animatedLayers.length){const layer=animatedLayers[layerId];if(layer){const items=layer.animationItems;if(items&&items.length){for(const item of items){if(item){const id=item.id;const assetId=item.assetId;const x=this.getCoordinateValue(item.x||'',item.randomX||'');const y=this.getCoordinateValue(item.y||'',item.randomY||'');const speedX=item.speedX?item.speedX/Nitro.instance.getConfiguration('system.animation.fps'):0;const speedY=item.speedY?item.speedY/Nitro.instance.getConfiguration('system.animation.fps'):0;animationItems.push({asset:assetId,x,y,speedX,speedY});}}}}layerId++;}planeVisualization.setAnimationLayer(layerId,animationItems,this.assetCollection);}}}if(!this.addPlane(id,plane))plane.dispose();}}getCoordinateValue(k,_arg_2){let _local_3=0;if(k.length>0){if(k.charAt(k.length-1)==='%'){k=k.substr(0,k.length-1);_local_3=parseFloat(k)/100;}}if(_arg_2.length>0){const _local_4=10000;const _local_5=Randomizer.getValues(1,0,_local_4);const _local_6=_local_5[0]/_local_4;if(_arg_2.charAt(_arg_2.length-1)==='%'){_arg_2=_arg_2.substr(0,_arg_2.length-1);_local_3=_local_3+_local_6*parseFloat(_arg_2)/100;}}return _local_3;}render(canvas,id,width,height,scale,normal,useTexture){let offsetX=arguments.length>7&&arguments[7]!==undefined?arguments[7]:0;let offsetY=arguments.length>8&&arguments[8]!==undefined?arguments[8]:0;let maxX=arguments.length>9&&arguments[9]!==undefined?arguments[9]:0;let maxY=arguments.length>10&&arguments[10]!==undefined?arguments[10]:0;let timeSinceStartMs=arguments.length>11&&arguments[11]!==undefined?arguments[11]:0;let plane=this.getPlane(id);if(!plane)plane=this.getPlane(LandscapeRasterizer.DEFAULT);if(!plane)return null;if(canvas){canvas.clear();}let graphic=plane.render(canvas,width,height,scale,normal,useTexture,offsetX,offsetY,maxX,maxY,timeSinceStartMs);if(graphic&&graphic!==canvas){graphic=graphic.clone();if(!graphic)return null;}let planeBitmapData=null;if(!plane.isStatic(scale)&&LandscapeRasterizer.UPDATE_INTERVAL>0){planeBitmapData=new PlaneBitmapData(graphic,Math.round(timeSinceStartMs/LandscapeRasterizer.UPDATE_INTERVAL)*LandscapeRasterizer.UPDATE_INTERVAL+LandscapeRasterizer.UPDATE_INTERVAL);}else{planeBitmapData=new PlaneBitmapData(graphic,-1);}return planeBitmapData;}getTextureIdentifier(k,_arg_2){if(_arg_2){if(_arg_2.x<0)return k+'_0';return k+'_1';}return super.getTextureIdentifier(k,_arg_2);}}LandscapeRasterizer.UPDATE_INTERVAL=500;","map":null,"metadata":{},"sourceType":"module"}