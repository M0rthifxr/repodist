{"ast":null,"code":"import{Vector3d}from'../../../../../../../room/utils/Vector3d';import{Plane}from'../basic/Plane';export class LandscapePlane extends Plane{constructor(){super(...arguments);this._width=0;this._height=0;}isStatic(k){const _local_2=this.getPlaneVisualization(k);if(_local_2)return!_local_2.hasAnimationLayers;return super.isStatic(k);}initializeDimensions(k,_arg_2){if(k<0)k=0;if(_arg_2<0)_arg_2=0;if(k!==this._width||_arg_2!==this._height){this._width=k;this._height=_arg_2;}}render(k,_arg_2,_arg_3,_arg_4,_arg_5,_arg_6,_arg_7,_arg_8,_arg_9,_arg_10,_arg_11){const visualization=this.getPlaneVisualization(_arg_4);if(!visualization||!visualization.geometry)return null;const _local_13=visualization.geometry.getScreenPoint(new Vector3d(0,0,0));const _local_14=visualization.geometry.getScreenPoint(new Vector3d(0,0,1));const _local_15=visualization.geometry.getScreenPoint(new Vector3d(0,1,0));if(_local_13&&_local_14&&_local_15){_arg_2=Math.round(Math.abs((_local_13.x-_local_15.x)*_arg_2/visualization.geometry.scale));_arg_3=Math.round(Math.abs((_local_13.y-_local_14.y)*_arg_3/visualization.geometry.scale));const _local_16=_arg_7*Math.abs(_local_13.x-_local_15.x);const _local_17=_arg_8*Math.abs(_local_13.y-_local_14.y);const _local_18=_arg_9*Math.abs(_local_13.x-_local_15.x);const _local_19=_arg_10*Math.abs(_local_13.y-_local_14.y);return visualization.render(k,_arg_2,_arg_3,_arg_5,_arg_6,_local_16,_local_17,_local_18,_local_19,_arg_9,_arg_10,_arg_11);}return null;}}LandscapePlane.DEFAULT_COLOR=0xFFFFFF;LandscapePlane.HORIZONTAL_ANGLE_DEFAULT=45;LandscapePlane.VERTICAL_ANGLE_DEFAULT=30;","map":null,"metadata":{},"sourceType":"module"}