{"ast":null,"code":"export class GroupBadgePartsParser{constructor(){this._bases=void 0;this._symbols=void 0;this._partColors=void 0;this._colorsA=void 0;this._colorsB=void 0;}flush(){this._bases=new Map();this._symbols=new Map();this._partColors=new Map();this._colorsA=new Map();this._colorsB=new Map();return true;}parse(wrapper){if(!wrapper)return false;let basesCount=wrapper.readInt();while(basesCount>0){const id=wrapper.readInt();const valueA=wrapper.readString();const valueB=wrapper.readString();this._bases.set(id,[valueA,valueB]);basesCount--;}let symbolsCount=wrapper.readInt();while(symbolsCount>0){const id=wrapper.readInt();const valueA=wrapper.readString();const valueB=wrapper.readString();this._symbols.set(id,[valueA,valueB]);symbolsCount--;}let partColorsCount=wrapper.readInt();while(partColorsCount>0){const id=wrapper.readInt();const color=wrapper.readString();this._partColors.set(id,color);partColorsCount--;}let colorsACount=wrapper.readInt();while(colorsACount>0){const id=wrapper.readInt();const color=wrapper.readString();this._colorsA.set(id,color);colorsACount--;}let colorsBCount=wrapper.readInt();while(colorsBCount>0){const id=wrapper.readInt();const color=wrapper.readString();this._colorsB.set(id,color);colorsBCount--;}return true;}get bases(){return this._bases;}get symbols(){return this._symbols;}get partColors(){return this._partColors;}get colorsA(){return this._colorsA;}get colorsB(){return this._colorsB;}}","map":null,"metadata":{},"sourceType":"module"}