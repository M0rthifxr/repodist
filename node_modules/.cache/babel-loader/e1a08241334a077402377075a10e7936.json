{"ast":null,"code":"import{NitroLogger}from'../../../core/common/logger/NitroLogger';import{NitroManager}from'../../../core/common/NitroManager';import{SocketConnectionEvent}from'../../../core/communication/events/SocketConnectionEvent';import{Nitro}from'../../Nitro';import{ClientPingEvent}from'../messages/incoming/client/ClientPingEvent';import{AuthenticatedEvent}from'../messages/incoming/security/AuthenticatedEvent';import{ClientHelloMessageComposer}from'../messages/outgoing/handshake/ClientHelloMessageComposer';import{InfoRetrieveMessageComposer}from'../messages/outgoing/handshake/InfoRetrieveMessageComposer';import{PongMessageComposer}from'../messages/outgoing/handshake/PongMessageComposer';import{SSOTicketMessageComposer}from'../messages/outgoing/handshake/SSOTicketMessageComposer';import{NitroCommunicationDemoEvent}from'./NitroCommunicationDemoEvent';export class NitroCommunicationDemo extends NitroManager{constructor(communication){super();this._communication=void 0;this._handShaking=void 0;this._didConnect=void 0;this._pongInterval=void 0;this._communication=communication;this._handShaking=false;this._didConnect=false;this._pongInterval=null;this.onConnectionOpenedEvent=this.onConnectionOpenedEvent.bind(this);this.onConnectionClosedEvent=this.onConnectionClosedEvent.bind(this);this.onConnectionErrorEvent=this.onConnectionErrorEvent.bind(this);this.sendPong=this.sendPong.bind(this);}onInit(){const connection=this._communication.connection;if(connection){connection.addEventListener(SocketConnectionEvent.CONNECTION_OPENED,this.onConnectionOpenedEvent);connection.addEventListener(SocketConnectionEvent.CONNECTION_CLOSED,this.onConnectionClosedEvent);connection.addEventListener(SocketConnectionEvent.CONNECTION_ERROR,this.onConnectionErrorEvent);}this._communication.registerMessageEvent(new ClientPingEvent(this.onClientPingEvent.bind(this)));this._communication.registerMessageEvent(new AuthenticatedEvent(this.onAuthenticatedEvent.bind(this)));}onDispose(){const connection=this._communication.connection;if(connection){connection.removeEventListener(SocketConnectionEvent.CONNECTION_OPENED,this.onConnectionOpenedEvent);connection.removeEventListener(SocketConnectionEvent.CONNECTION_CLOSED,this.onConnectionClosedEvent);connection.removeEventListener(SocketConnectionEvent.CONNECTION_ERROR,this.onConnectionErrorEvent);}this._handShaking=false;this.stopPonging();super.onDispose();}onConnectionOpenedEvent(event){const connection=this._communication.connection;if(!connection)return;this._didConnect=true;this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ESTABLISHED,connection);if(Nitro.instance.getConfiguration('system.pong.manually',false))this.startPonging();this.startHandshake(connection);connection.send(new ClientHelloMessageComposer(null,null,null,null));this.tryAuthentication(connection);}onConnectionClosedEvent(event){const connection=this._communication.connection;if(!connection)return;this.stopPonging();if(this._didConnect)this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_CLOSED,connection);}onConnectionErrorEvent(event){const connection=this._communication.connection;if(!connection)return;this.stopPonging();this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_ERROR,connection);}tryAuthentication(connection){if(!connection||!this.getSSO()){if(!this.getSSO()){NitroLogger.log('Login without an SSO ticket is not supported');}this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKE_FAILED,connection);return;}connection.send(new SSOTicketMessageComposer(this.getSSO(),Nitro.instance.time));}onClientPingEvent(event){if(!event||!event.connection)return;this.sendPong(event.connection);}onAuthenticatedEvent(event){if(!event||!event.connection)return;this.completeHandshake(event.connection);this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_AUTHENTICATED,event.connection);event.connection.send(new InfoRetrieveMessageComposer());}startHandshake(connection){this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKING,connection);this._handShaking=true;}completeHandshake(connection){this.dispatchCommunicationDemoEvent(NitroCommunicationDemoEvent.CONNECTION_HANDSHAKED,connection);this._handShaking=false;}startPonging(){this.stopPonging();this._pongInterval=setInterval(this.sendPong,Nitro.instance.getConfiguration('system.pong.interval.ms',20000));}stopPonging(){if(!this._pongInterval)return;clearInterval(this._pongInterval);this._pongInterval=null;}sendPong(){let connection=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;connection=connection||this._communication.connection||null;if(!connection)return;connection.send(new PongMessageComposer());}dispatchCommunicationDemoEvent(type,connection){Nitro.instance.events.dispatchEvent(new NitroCommunicationDemoEvent(type,connection));}getSSO(){return Nitro.instance.getConfiguration('sso.ticket',null);}}","map":null,"metadata":{},"sourceType":"module"}