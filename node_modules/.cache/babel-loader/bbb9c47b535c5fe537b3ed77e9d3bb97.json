{"ast":null,"code":"import{NitroLogger}from'../../core/common/logger/NitroLogger';import{EventDispatcher}from'../../core/events/EventDispatcher';import{NitroEvent}from'../../core/events/NitroEvent';import{Nitro}from'../Nitro';import{EffectAssetDownloadLibrary}from'./EffectAssetDownloadLibrary';import{AvatarRenderEffectLibraryEvent}from'./events/AvatarRenderEffectLibraryEvent';import{AvatarRenderEvent}from'./events/AvatarRenderEvent';export class EffectAssetDownloadManager extends EventDispatcher{constructor(assets,structure){super();this._assets=void 0;this._structure=void 0;this._missingMandatoryLibs=void 0;this._effectMap=void 0;this._initDownloadBuffer=void 0;this._effectListeners=void 0;this._incompleteEffects=void 0;this._pendingDownloadQueue=void 0;this._currentDownloads=void 0;this._libraryNames=void 0;this._isReady=void 0;this._assets=assets;this._structure=structure;this._missingMandatoryLibs=Nitro.instance.getConfiguration('avatar.mandatory.effect.libraries');this._effectMap=new Map();this._effectListeners=new Map();this._incompleteEffects=new Map();this._initDownloadBuffer=[];this._pendingDownloadQueue=[];this._currentDownloads=[];this._libraryNames=[];this._isReady=false;this.onLibraryLoaded=this.onLibraryLoaded.bind(this);this.onAvatarRenderReady=this.onAvatarRenderReady.bind(this);this.loadEffectMap();this._structure.renderManager.events.addEventListener(AvatarRenderEvent.AVATAR_RENDER_READY,this.onAvatarRenderReady);}loadEffectMap(){const request=new XMLHttpRequest();try{request.open('GET',Nitro.instance.getConfiguration('avatar.effectmap.url'));request.send();request.onloadend=e=>{if(request.responseText){const data=JSON.parse(request.responseText);this.processEffectMap(data.effects);this.processMissingLibraries();this._isReady=true;this.dispatchEvent(new NitroEvent(EffectAssetDownloadManager.DOWNLOADER_READY));}};request.onerror=e=>{throw new Error('invalid_avatar_effect_map');};}catch(e){NitroLogger.log(e);}}processEffectMap(data){if(!data)return;for(const effect of data){if(!effect)continue;const id=effect.id;const lib=effect.lib;const revision=effect.revision||'';if(this._libraryNames.indexOf(lib)>=0)continue;this._libraryNames.push(lib);const downloadLibrary=new EffectAssetDownloadLibrary(lib,revision,this._assets,Nitro.instance.getConfiguration('avatar.asset.effect.url'));downloadLibrary.addEventListener(AvatarRenderEffectLibraryEvent.DOWNLOAD_COMPLETE,this.onLibraryLoaded);let existing=this._effectMap.get(id);if(!existing)existing=[];existing.push(downloadLibrary);this._effectMap.set(id,existing);}}downloadAvatarEffect(id,listener){if(!this._isReady||!this._structure.renderManager.isReady){this._initDownloadBuffer.push([id,listener]);return;}const pendingLibraries=this.getAvatarEffectPendingLibraries(id);if(pendingLibraries&&pendingLibraries.length){if(listener&&!listener.disposed){let listeners=this._effectListeners.get(id.toString());if(!listeners)listeners=[];listeners.push(listener);this._effectListeners.set(id.toString(),listeners);}this._incompleteEffects.set(id.toString(),pendingLibraries);for(const library of pendingLibraries){if(!library)continue;this.downloadLibrary(library);}}else{if(listener&&!listener.disposed)listener.resetEffect(id);}}onAvatarRenderReady(event){if(!event)return;for(const[id,listener]of this._initDownloadBuffer){this.downloadAvatarEffect(id,listener);}this._initDownloadBuffer=[];}onLibraryLoaded(event){if(!event||!event.library)return;const loadedEffects=[];this._structure.registerAnimation(event.library.animation);for(const[id,libraries]of this._incompleteEffects.entries()){let isReady=true;for(const library of libraries){if(!library||library.isLoaded)continue;isReady=false;break;}if(isReady){loadedEffects.push(id);const listeners=this._effectListeners.get(id);for(const listener of listeners){if(!listener||listener.disposed)continue;listener.resetEffect(parseInt(id));}this._effectListeners.delete(id);this.dispatchEvent(new NitroEvent(EffectAssetDownloadManager.LIBRARY_LOADED));}}for(const id of loadedEffects)this._incompleteEffects.delete(id);let index=0;while(index<this._currentDownloads.length){const download=this._currentDownloads[index];if(download){if(download.libraryName===event.library.libraryName)this._currentDownloads.splice(index,1);}index++;}}processMissingLibraries(){const libraries=this._missingMandatoryLibs.slice();for(const library of libraries){if(!library)continue;const map=this._effectMap.get(library);if(map)for(const effect of map)effect&&this.downloadLibrary(effect);}}isAvatarEffectReady(effect){if(!this._isReady||!this._structure.renderManager.isReady){return false;}const pendingLibraries=this.getAvatarEffectPendingLibraries(effect);return!pendingLibraries.length;}getAvatarEffectPendingLibraries(id){const pendingLibraries=[];if(!this._structure)return pendingLibraries;const libraries=this._effectMap.get(id.toString());if(libraries){for(const library of libraries){if(!library||library.isLoaded)continue;if(pendingLibraries.indexOf(library)===-1)pendingLibraries.push(library);}}return pendingLibraries;}downloadLibrary(library){if(!library||library.isLoaded)return;if(this._pendingDownloadQueue.indexOf(library)>=0||this._currentDownloads.indexOf(library)>=0)return;this._pendingDownloadQueue.push(library);this.processDownloadQueue();}processDownloadQueue(){while(this._pendingDownloadQueue.length){const library=this._pendingDownloadQueue[0];library.downloadAsset();this._currentDownloads.push(this._pendingDownloadQueue.shift());}}}EffectAssetDownloadManager.DOWNLOADER_READY='EADM_DOWNLOADER_READY';EffectAssetDownloadManager.LIBRARY_LOADED='EADM_LIBRARY_LOADED';EffectAssetDownloadManager.MAX_DOWNLOADS=2;","map":null,"metadata":{},"sourceType":"module"}