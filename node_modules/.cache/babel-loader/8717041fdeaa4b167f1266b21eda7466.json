{"ast":null,"code":"import{SpriteUtilities}from'../../../../../room/utils/SpriteUtilities';import{ColorData}from'./ColorData';import{DirectionData}from'./DirectionData';import{LayerData}from'./LayerData';export class SizeData{constructor(layerCount,angle){this._layerCount=void 0;this._angle=void 0;this._defaultDirection=void 0;this._directions=void 0;this._colors=void 0;this._lastDirectionData=void 0;this._lastDirection=void 0;this._layerCount=layerCount<0?0:layerCount>SizeData.MAX_LAYERS?SizeData.MAX_LAYERS:layerCount;this._angle=angle<1?1:angle>360?360:angle;this._defaultDirection=new DirectionData(this._layerCount);this._directions=new Map();this._colors=[];this._lastDirectionData=null;this._lastDirection=-1;}dispose(){if(this._defaultDirection)this._defaultDirection.dispose();for(const direction of this._directions.values()){if(!direction)continue;direction.dispose();}for(const color of this._colors){if(!color)continue;color.dispose();}this.reset();}reset(){this._defaultDirection=null;this._colors=[];this._lastDirectionData=null;this._lastDirection=-1;this._directions.clear();}processLayers(layers){if(!layers)return false;return this.setDirectionLayers(this._defaultDirection,layers);}processDirections(directions){if(!directions)return false;for(const key in directions){const direction=directions[key];if(!direction)continue;const directionNumber=parseInt(key);if(this._directions.get(directionNumber))return false;const directionData=new DirectionData(this._layerCount);directionData.setFromDirection(this._defaultDirection);this.setDirectionLayers(directionData,direction.layers);this._directions.set(directionNumber,directionData);this._lastDirectionData=null;this._lastDirection=-1;}return true;}processColors(colors){if(!colors)return false;for(const key in colors){const color=colors[key];if(!color)continue;const colorNumber=parseInt(key);if(this._colors[colorNumber])return false;const colorData=new ColorData(this._layerCount);for(const layer in color.layers){const colorLayer=color.layers[layer];if(!colorLayer)continue;const layerId=parseInt(layer);const colorId=colorLayer.color;colorData.setColorLayer(layerId,colorId);}this._colors[colorNumber]=colorData;}return true;}setDirectionLayers(directionData,layers){if(!directionData||!layers)return false;for(const key in layers){const layer=layers[key];if(!layer)continue;const layerId=parseInt(key);if(layerId<0||layerId>=this._layerCount)return false;if(layer.ink!==undefined)directionData.setLayerInk(layerId,SpriteUtilities.inkToBlendMode(layer.ink));if(layer.tag!==undefined)directionData.setLayerTag(layerId,layer.tag);if(layer.alpha!==undefined)directionData.setLayerAlpha(layerId,layer.alpha);if(layer.ignoreMouse!==undefined)directionData.setLayerIgnoreMouse(layerId,layer.ignoreMouse);if(layer.x!==undefined)directionData.setLayerXOffset(layerId,layer.x);if(layer.y!==undefined)directionData.setLayerYOffset(layerId,layer.y);if(layer.z!==undefined)directionData.setLayerZOffset(layerId,layer.z/-1000);}return true;}getValidDirection(direction){const existing=this._directions.get(direction);if(existing)return direction;direction=(direction%360+360)%360;let currentAngle=-1;let validDirection=-1;for(const key of this._directions.keys()){let angle=(key*this._angle-direction+360)%360;if(angle>180)angle=360-angle;if(angle<currentAngle||currentAngle<0){currentAngle=angle;validDirection=key;}}if(validDirection>=0)return Math.trunc(validDirection);return 0;}getDirectionData(direction){if(direction===this._lastDirection&&this._lastDirectionData)return this._lastDirectionData;let directionData=this._directions.get(direction);if(!directionData)directionData=this._defaultDirection;this._lastDirection=direction;this._lastDirectionData=directionData;return this._lastDirectionData;}getLayerTag(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_TAG;return directionData.getLayerTag(layerId);}getLayerInk(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_INK;return directionData.getLayerInk(layerId);}getLayerAlpha(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_ALPHA;return directionData.getLayerAlpha(layerId);}getLayerColor(layerId,colorId){const existing=this._colors[colorId];if(!existing)return ColorData.DEFAULT_COLOR;return existing.getLayerColor(layerId);}getLayerIgnoreMouse(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_IGNORE_MOUSE;return directionData.getLayerIgnoreMouse(layerId);}getLayerXOffset(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_XOFFSET;return directionData.getLayerXOffset(layerId);}getLayerYOffset(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_YOFFSET;return directionData.getLayerYOffset(layerId);}getLayerZOffset(direction,layerId){const directionData=this.getDirectionData(direction);if(!directionData)return LayerData.DEFAULT_ZOFFSET;return directionData.getLayerZOffset(layerId);}get layerCount(){return this._layerCount;}}SizeData.MAX_LAYERS=26;","map":null,"metadata":{},"sourceType":"module"}