{"ast":null,"code":"export class AvatarFigureContainer{constructor(figure){this._parts=void 0;this._parts=new Map();this.parseFigure(figure);}getPartTypeIds(){return this.partSets().keys();}hasPartType(k){return!!this.partSets().get(k);}getPartSetId(k){const existing=this.partSets().get(k);if(!existing)return 0;return existing.get('setid');}getPartColorIds(k){const existing=this.partSets().get(k);if(!existing)return null;return existing.get('colorids');}updatePart(setType,partSetId,colorIds){const set=new Map();set.set('type',setType);set.set('setid',partSetId);set.set('colorids',colorIds);const existingSets=this.partSets();existingSets.delete(setType);existingSets.set(setType,set);}removePart(k){this.partSets().delete(k);}getFigureString(){const parts=[];for(const key of this.partSets().keys()){if(!key)continue;let setParts=[];setParts.push(key);setParts.push(this.getPartSetId(key));setParts=setParts.concat(this.getPartColorIds(key));parts.push(setParts.join('-'));}return parts.join('.');}partSets(){if(!this._parts)this._parts=new Map();return this._parts;}parseFigure(figure){if(!figure)figure='';for(const part of figure.split('.')){const pieces=part.split('-');if(pieces.length>=2){const type=pieces[0];const setId=parseInt(pieces[1]);const colors=[];let index=2;while(index<pieces.length){colors.push(parseInt(pieces[index]));index++;}this.updatePart(type,setId,colors);}}}}","map":null,"metadata":{},"sourceType":"module"}