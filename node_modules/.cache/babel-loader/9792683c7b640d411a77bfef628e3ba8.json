{"ast":null,"code":"import{RoomObjectCategory,RoomWidgetEnum}from'@nitrots/nitro-renderer';import{RoomWidgetHandler}from'.';import{GetRoomEngine}from'../../../..';import{RoomObjectItem,RoomWidgetChooserContentEvent}from'../events';import{RoomWidgetRequestWidgetMessage,RoomWidgetRoomObjectMessage}from'../messages';export class UserChooserWidgetHandler extends RoomWidgetHandler{processEvent(event){}processWidgetMessage(message){if(!message)return null;switch(message.type){case RoomWidgetRequestWidgetMessage.USER_CHOOSER:this.processChooser();break;case RoomWidgetRoomObjectMessage.SELECT_OBJECT:this.selectRoomObject(message);break;}return null;}processChooser(){const roomId=this.container.roomSession.roomId;const items=[];const userItems=GetRoomEngine().getRoomObjects(roomId,RoomObjectCategory.UNIT);userItems.forEach(roomObject=>{const userData=this.container.roomSession.userDataManager.getUserDataByIndex(roomObject.id);if(!userData)return;items.push(new RoomObjectItem(userData.roomIndex,RoomObjectCategory.UNIT,userData.name));});items.sort((a,b)=>{return a.name<b.name?-1:1;});this.container.eventDispatcher.dispatchEvent(new RoomWidgetChooserContentEvent(RoomWidgetChooserContentEvent.USER_CHOOSER_CONTENT,items));}selectRoomObject(message){if(message.category!==RoomObjectCategory.UNIT)return;GetRoomEngine().selectRoomObject(this.container.roomSession.roomId,message.id,message.category);}get type(){return RoomWidgetEnum.USER_CHOOSER;}get eventTypes(){return[];}get messageTypes(){return[RoomWidgetRequestWidgetMessage.USER_CHOOSER,RoomWidgetRoomObjectMessage.SELECT_OBJECT];}}","map":null,"metadata":{},"sourceType":"module"}