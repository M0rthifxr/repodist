{"ast":null,"code":"export class RoomHeightMapParser{constructor(){this._width=void 0;this._height=void 0;this._heights=void 0;}static decodeTileHeight(height){return height<0?-1:(height&16383)/0x0100;}static decodeIsStackingBlocked(height){return!!(height&0x4000);}static decodeIsRoomTile(height){return height>=0;}getTileHeight(x,y){if(x<0||x>=this._width||y<0||y>=this._height)return-1;return RoomHeightMapParser.decodeTileHeight(this._heights[y*this._width+x]);}getStackingBlocked(x,y){if(x<0||x>=this._width||y<0||y>=this._height)return true;return RoomHeightMapParser.decodeIsStackingBlocked(this._heights[y*this._width+x]);}isRoomTile(x,y){if(x<0||x>=this._width||y<0||y>=this._height)return false;return RoomHeightMapParser.decodeIsRoomTile(this._heights[y*this._width+x]);}flush(){this._width=0;this._height=0;this._heights=[];return true;}parse(wrapper){if(!wrapper)return false;this._width=wrapper.readInt();const totalTiles=wrapper.readInt();this._height=totalTiles/this._width;let i=0;while(i<totalTiles){this._heights[i]=wrapper.readShort();i++;}return true;}get width(){return this._width;}get height(){return this._height;}get heights(){return this._heights;}}","map":null,"metadata":{},"sourceType":"module"}