{"ast":null,"code":"import{useEffect,useState}from'react';import{LocalizeText,Offer,ProductTypeEnum}from'../../../../../api';import{AutoGrid,Button,ButtonGroup,Column}from'../../../../../common';import{useCatalog}from'../../../../../hooks';import{CatalogGridOfferView}from'../common/CatalogGridOfferView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const SPACES_GROUP_NAMES=['floors','walls','views'];export const CatalogSpacesWidgetView=props=>{const{columnCount=5,children=null,...rest}=props;const[groupedOffers,setGroupedOffers]=useState(null);const[selectedGroupIndex,setSelectedGroupIndex]=useState(-1);const[selectedOfferForGroup,setSelectedOfferForGroup]=useState(null);const{currentPage=null,currentOffer=null,setCurrentOffer=null,setPurchaseOptions=null}=useCatalog();const setSelectedOffer=offer=>{if(!offer)return;setSelectedOfferForGroup(prevValue=>{const newValue=[...prevValue];newValue[selectedGroupIndex]=offer;return newValue;});};useEffect(()=>{if(!currentPage)return;const groupedOffers=[[],[],[]];for(const offer of currentPage.offers){if(offer.pricingModel!==Offer.PRICING_MODEL_SINGLE&&offer.pricingModel!==Offer.PRICING_MODEL_MULTI)continue;const product=offer.product;if(!product||product.productType!==ProductTypeEnum.WALL&&product.productType!==ProductTypeEnum.FLOOR||!product.furnitureData)continue;const className=product.furnitureData.className;switch(className){case'floor':groupedOffers[0].push(offer);break;case'wallpaper':groupedOffers[1].push(offer);break;case'landscape':groupedOffers[2].push(offer);break;}}setGroupedOffers(groupedOffers);setSelectedGroupIndex(0);setSelectedOfferForGroup([groupedOffers[0][0],groupedOffers[1][0],groupedOffers[2][0]]);},[currentPage]);useEffect(()=>{if(selectedGroupIndex===-1||!selectedOfferForGroup)return;setCurrentOffer(selectedOfferForGroup[selectedGroupIndex]);},[selectedGroupIndex,selectedOfferForGroup,setCurrentOffer]);useEffect(()=>{if(selectedGroupIndex===-1||!selectedOfferForGroup||!currentOffer)return;setPurchaseOptions(prevValue=>{const newValue={...prevValue};newValue.extraData=selectedOfferForGroup[selectedGroupIndex].product.extraParam;newValue.extraParamRequired=true;return newValue;});},[currentOffer,selectedGroupIndex,selectedOfferForGroup,setPurchaseOptions]);if(!groupedOffers||selectedGroupIndex===-1)return null;const offers=groupedOffers[selectedGroupIndex];return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ButtonGroup,{className:\"purchase-buttons\",children:SPACES_GROUP_NAMES.map((name,index)=>/*#__PURE__*/_jsx(Button,{active:selectedGroupIndex===index,onClick:event=>setSelectedGroupIndex(index),children:LocalizeText(`catalog.spaces.tab.${name}`)},index))}),/*#__PURE__*/_jsx(Column,{className:\"grid-bg item-picker p-2\",size:7,overflow:\"hidden\",children:/*#__PURE__*/_jsxs(AutoGrid,{columnCount:columnCount,...rest,children:[offers&&offers.length>0&&offers.map((offer,index)=>/*#__PURE__*/_jsx(CatalogGridOfferView,{itemActive:currentOffer&&currentOffer===offer,offer:offer,selectOffer:offer=>setSelectedOffer(offer)},index)),children]})})]});};","map":null,"metadata":{},"sourceType":"module"}